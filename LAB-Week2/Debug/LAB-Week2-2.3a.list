
LAB-Week2-2.3a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000154  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002e8  080002e8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002e8  080002e8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080002e8  080002e8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002e8  080002e8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002e8  080002e8  000102e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002ec  080002ec  000102ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080002f0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000001c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_line   00000497  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000000dc  00000000  00000000  000204d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000087  00000000  00000000  000205b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000068  00000000  00000000  00020640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00003afc  00000000  00000000  000206a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000030  00000000  00000000  000241a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00000f34  00000000  00000000  000241d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002510c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  0002515c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080002d0 	.word	0x080002d0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	080002d0 	.word	0x080002d0

080001d4 <assembly_function>:

.text
@define code

assembly_function:
	MOV R3, #0x0					@start of index string
 80001d4:	f04f 0300 	mov.w	r3, #0
	MOV R4, #0x1					@use to iterate through next string
 80001d8:	f04f 0401 	mov.w	r4, #1
	MOV R6, #0x61					@This determines if lowercase or upper case
 80001dc:	f04f 0661 	mov.w	r6, #97	; 0x61
	MOV R7, #0x20					@this is ascii for space which needs to be skipped over
 80001e0:	f04f 0720 	mov.w	r7, #32


	LDR R1, =first_string		 	@pointer first letter of string
 80001e4:	490f      	ldr	r1, [pc, #60]	; (8000224 <iterate_upper+0x4>)

	MOV R2, all_lower_value			@compare this to dummy
 80001e6:	f04f 0201 	mov.w	r2, #1


	CMP R2, R3
 80001ea:	429a      	cmp	r2, r3
	BEQ all_upper
 80001ec:	d005      	beq.n	80001fa <all_upper>
	BNE all_lower
 80001ee:	d1ff      	bne.n	80001f0 <all_lower>

080001f0 <all_lower>:


all_lower:

	LDRB R5, [R1, R3]				@dereference this character
 80001f0:	5ccd      	ldrb	r5, [r1, r3]

	CMP R5, R6						@condition if the ascii value is less than the lowest asii lowercase value
 80001f2:	42b5      	cmp	r5, r6
									@if flag is raised then means it is uppercase
									@if R5 < R6

	BLT lower_operation
 80001f4:	db06      	blt.n	8000204 <lower_operation>
	B iterate_lower
 80001f6:	e00c      	b.n	8000212 <iterate_lower>
	B all_lower
 80001f8:	e7fa      	b.n	80001f0 <all_lower>

080001fa <all_upper>:

all_upper:

	LDRB R5, [R1, R3]				@dereference this character
 80001fa:	5ccd      	ldrb	r5, [r1, r3]


	CMP R5, R6						@condition if the ascii value is less than the lowest asii lowercase value
 80001fc:	42b5      	cmp	r5, r6
									@if flag is raised then means it is uppercase

	BGE upper_operation				@if R5 > R6
 80001fe:	da0a      	bge.n	8000216 <upper_operation>
	B iterate_upper
 8000200:	e00e      	b.n	8000220 <iterate_upper>
	B all_upper
 8000202:	e7fa      	b.n	80001fa <all_upper>

08000204 <lower_operation>:

lower_operation:

	CMP R7, R5
 8000204:	42af      	cmp	r7, r5
	BEQ iterate_lower
 8000206:	d004      	beq.n	8000212 <iterate_lower>

	ADD R5, R5, 0x20
 8000208:	f105 0520 	add.w	r5, r5, #32
	STRB R5, [R1, R3]
 800020c:	54cd      	strb	r5, [r1, r3]
	ADD R3, R3, R4					@R3 = R3 + R4 increment for next
 800020e:	4423      	add	r3, r4
	B all_lower
 8000210:	e7ee      	b.n	80001f0 <all_lower>

08000212 <iterate_lower>:

iterate_lower:
	ADD R3, R3, R4					@R3 = R3 + R4 increment for next
 8000212:	4423      	add	r3, r4
	B all_lower
 8000214:	e7ec      	b.n	80001f0 <all_lower>

08000216 <upper_operation>:

upper_operation:

	SUB R5, R5, 0x20
 8000216:	f1a5 0520 	sub.w	r5, r5, #32
	STRB R5, [R1, R3]
 800021a:	54cd      	strb	r5, [r1, r3]
	ADD R3, R3, R4					@R3 = R3 + R4 increment for next
 800021c:	4423      	add	r3, r4
	B all_upper
 800021e:	e7ec      	b.n	80001fa <all_upper>

08000220 <iterate_upper>:

iterate_upper:
	ADD R3, R3, R4					@R3 = R3 + R4 increment for next
 8000220:	4423      	add	r3, r4
	B all_upper
 8000222:	e7ea      	b.n	80001fa <all_upper>
	LDR R1, =first_string		 	@pointer first letter of string
 8000224:	20000000 	.word	0x20000000

08000228 <main>:
#endif

extern void assembly_function();

int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	assembly_function();
 800022c:	f7ff ffd2 	bl	80001d4 <assembly_function>
	for(;;);
 8000230:	e7fe      	b.n	8000230 <main+0x8>
	...

08000234 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000234:	480d      	ldr	r0, [pc, #52]	; (800026c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000236:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000238:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800023c:	480c      	ldr	r0, [pc, #48]	; (8000270 <LoopForever+0x6>)
  ldr r1, =_edata
 800023e:	490d      	ldr	r1, [pc, #52]	; (8000274 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000240:	4a0d      	ldr	r2, [pc, #52]	; (8000278 <LoopForever+0xe>)
  movs r3, #0
 8000242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000244:	e002      	b.n	800024c <LoopCopyDataInit>

08000246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800024a:	3304      	adds	r3, #4

0800024c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800024c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800024e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000250:	d3f9      	bcc.n	8000246 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000252:	4a0a      	ldr	r2, [pc, #40]	; (800027c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000254:	4c0a      	ldr	r4, [pc, #40]	; (8000280 <LoopForever+0x16>)
  movs r3, #0
 8000256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000258:	e001      	b.n	800025e <LoopFillZerobss>

0800025a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800025a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800025c:	3204      	adds	r2, #4

0800025e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800025e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000260:	d3fb      	bcc.n	800025a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000262:	f000 f811 	bl	8000288 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000266:	f7ff ffdf 	bl	8000228 <main>

0800026a <LoopForever>:

LoopForever:
  b LoopForever
 800026a:	e7fe      	b.n	800026a <LoopForever>
  ldr   r0, =_estack
 800026c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000274:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000278:	080002f0 	.word	0x080002f0
  ldr r2, =_sbss
 800027c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000280:	2000002c 	.word	0x2000002c

08000284 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000284:	e7fe      	b.n	8000284 <ADC1_2_IRQHandler>
	...

08000288 <__libc_init_array>:
 8000288:	b570      	push	{r4, r5, r6, lr}
 800028a:	4d0d      	ldr	r5, [pc, #52]	; (80002c0 <__libc_init_array+0x38>)
 800028c:	4c0d      	ldr	r4, [pc, #52]	; (80002c4 <__libc_init_array+0x3c>)
 800028e:	1b64      	subs	r4, r4, r5
 8000290:	10a4      	asrs	r4, r4, #2
 8000292:	2600      	movs	r6, #0
 8000294:	42a6      	cmp	r6, r4
 8000296:	d109      	bne.n	80002ac <__libc_init_array+0x24>
 8000298:	4d0b      	ldr	r5, [pc, #44]	; (80002c8 <__libc_init_array+0x40>)
 800029a:	4c0c      	ldr	r4, [pc, #48]	; (80002cc <__libc_init_array+0x44>)
 800029c:	f000 f818 	bl	80002d0 <_init>
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	10a4      	asrs	r4, r4, #2
 80002a4:	2600      	movs	r6, #0
 80002a6:	42a6      	cmp	r6, r4
 80002a8:	d105      	bne.n	80002b6 <__libc_init_array+0x2e>
 80002aa:	bd70      	pop	{r4, r5, r6, pc}
 80002ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80002b0:	4798      	blx	r3
 80002b2:	3601      	adds	r6, #1
 80002b4:	e7ee      	b.n	8000294 <__libc_init_array+0xc>
 80002b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ba:	4798      	blx	r3
 80002bc:	3601      	adds	r6, #1
 80002be:	e7f2      	b.n	80002a6 <__libc_init_array+0x1e>
 80002c0:	080002e8 	.word	0x080002e8
 80002c4:	080002e8 	.word	0x080002e8
 80002c8:	080002e8 	.word	0x080002e8
 80002cc:	080002ec 	.word	0x080002ec

080002d0 <_init>:
 80002d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d2:	bf00      	nop
 80002d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002d6:	bc08      	pop	{r3}
 80002d8:	469e      	mov	lr, r3
 80002da:	4770      	bx	lr

080002dc <_fini>:
 80002dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002de:	bf00      	nop
 80002e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e2:	bc08      	pop	{r3}
 80002e4:	469e      	mov	lr, r3
 80002e6:	4770      	bx	lr

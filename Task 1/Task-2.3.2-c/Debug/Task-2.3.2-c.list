
Task-2.3.2-c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000198  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800032c  0800032c  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800032c  0800032c  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  0800032c  0800032c  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800032c  0800032c  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800032c  0800032c  0001032c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000330  08000330  00010330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08000334  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020034  2**0
                  CONTENTS
 10 .bss          0000001c  20000034  20000034  00020034  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000050  20000050  00020034  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_line   000004b4  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000000dc  00000000  00000000  00020518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000087  00000000  00000000  000205f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000068  00000000  00000000  00020680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00003aff  00000000  00000000  000206e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000030  00000000  00000000  000241e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00000f34  00000000  00000000  00024218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002514c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  0002519c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000034 	.word	0x20000034
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000314 	.word	0x08000314

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000038 	.word	0x20000038
 80001d0:	08000314 	.word	0x08000314

080001d4 <assembly_function>:
.text
@define code

assembly_function:

	MOV R2, #0x0												@start of iteration of string i.e. used as an offset
 80001d4:	f04f 0200 	mov.w	r2, #0

	MOV R4, #0x61												@this determines if lowercase or upper case
 80001d8:	f04f 0461 	mov.w	r4, #97	; 0x61

	LDR R1, =first_string										@load address for string into R1
 80001dc:	4922      	ldr	r1, [pc, #136]	; (8000268 <iterate+0x6>)

080001de <get_first_letter>:

get_first_letter:

	LDRB R3, [R1, R2]											@load byte (letter in ascii)
 80001de:	5c8b      	ldrb	r3, [r1, r2]

	CMP R3, 0x61												@first lowercase ascii value
 80001e0:	2b61      	cmp	r3, #97	; 0x61

	BGE check_valid_ascii_first_letter_lower_case 				@potentially lowercase
 80001e2:	da09      	bge.n	80001f8 <check_valid_ascii_first_letter_lower_case>

	CMP R3, 0x5b												@last uppercase ascii value
 80001e4:	2b5b      	cmp	r3, #91	; 0x5b

	BLT check_valid_ascii_first_letter_upper_case				@potentially uppercase
 80001e6:	db02      	blt.n	80001ee <check_valid_ascii_first_letter_upper_case>

	ADD R2, R2, 0x1												@iterate offest
 80001e8:	f102 0201 	add.w	r2, r2, #1

	B get_first_letter											@get first letter
 80001ec:	e7f7      	b.n	80001de <get_first_letter>

080001ee <check_valid_ascii_first_letter_upper_case>:

check_valid_ascii_first_letter_upper_case:

	CMP R3, 0x41												@potentially uppercase
 80001ee:	2b41      	cmp	r3, #65	; 0x41

	ADD R2, R2, 0x1												@iterate to next if it isnt uppercase
 80001f0:	f102 0201 	add.w	r2, r2, #1

	BGE grab_letter												@first valid ascii letter is uppercase --> start program
 80001f4:	da0b      	bge.n	800020e <grab_letter>

	BLT get_first_letter 										@letter is not ASCII --> start first letter check again
 80001f6:	dbf2      	blt.n	80001de <get_first_letter>

080001f8 <check_valid_ascii_first_letter_lower_case>:


check_valid_ascii_first_letter_lower_case:

	CMP R3, 0x7B												@checking if valid ASCII
 80001f8:	2b7b      	cmp	r3, #123	; 0x7b

	BLT to_upper												@valid ASCII
 80001fa:	db02      	blt.n	8000202 <to_upper>

	ADD R2, R2, 0x1												@iterate offset for next letter
 80001fc:	f102 0201 	add.w	r2, r2, #1

	B get_first_letter											@invalid ASCII
 8000200:	e7ed      	b.n	80001de <get_first_letter>

08000202 <to_upper>:

to_upper:

	SUB R3, R3, 0x20											@making the first letter uppercase
 8000202:	f1a3 0320 	sub.w	r3, r3, #32

	STRB R3, [R1, R2]											@storing it back into the string after manipulation
 8000206:	548b      	strb	r3, [r1, r2]

	ADD R2, R2, #0x1											@increment address offset of string
 8000208:	f102 0201 	add.w	r2, r2, #1

	B grab_letter												@start program
 800020c:	e7ff      	b.n	800020e <grab_letter>

0800020e <grab_letter>:

grab_letter:

	LDRB R3, [R1, R2]											@load byte (letter in ascii)
 800020e:	5c8b      	ldrb	r3, [r1, r2]

	B check_full_stop											@check for full stop
 8000210:	e7ff      	b.n	8000212 <check_full_stop>

08000212 <check_full_stop>:

check_full_stop:

	CMP R3, 0x2E												@check for full stop
 8000212:	2b2e      	cmp	r3, #46	; 0x2e

	BEQ iterate_after_full_stop									@if there is a full stop find next value
 8000214:	d000      	beq.n	8000218 <iterate_after_full_stop>

	BNE check_valid_upper_case_ascii							@all other characters should be lowercase
 8000216:	d116      	bne.n	8000246 <check_valid_upper_case_ascii>

08000218 <iterate_after_full_stop>:

iterate_after_full_stop:

	ADD R2, R2, 0x1												@next letter
 8000218:	f102 0201 	add.w	r2, r2, #1

	LDRB R3, [R1, R2]											@load byte (letter in ascii)
 800021c:	5c8b      	ldrb	r3, [r1, r2]

	B check_valid_upper_case_ascii_after_full_stop				@check if uppercase
 800021e:	e7ff      	b.n	8000220 <check_valid_upper_case_ascii_after_full_stop>

08000220 <check_valid_upper_case_ascii_after_full_stop>:

check_valid_upper_case_ascii_after_full_stop:

	CMP R3, 0x41												@potentially uppercase
 8000220:	2b41      	cmp	r3, #65	; 0x41

	BGE confirm_valid_upper_case_ascii_after_full_stop			@confirm if uppercase
 8000222:	da00      	bge.n	8000226 <confirm_valid_upper_case_ascii_after_full_stop>

	BLT check_valid_lower_case_ascii_after_full_stop			@if not check if lower
 8000224:	db02      	blt.n	800022c <check_valid_lower_case_ascii_after_full_stop>

08000226 <confirm_valid_upper_case_ascii_after_full_stop>:

confirm_valid_upper_case_ascii_after_full_stop:

	CMP R3, 0x5B												@less than highest uppercase ascii value
 8000226:	2b5b      	cmp	r3, #91	; 0x5b

	BLT iterate													@iterate to next letter
 8000228:	db1b      	blt.n	8000262 <iterate>

	BGE check_valid_lower_case_ascii_after_full_stop			@make it lower
 800022a:	daff      	bge.n	800022c <check_valid_lower_case_ascii_after_full_stop>

0800022c <check_valid_lower_case_ascii_after_full_stop>:

check_valid_lower_case_ascii_after_full_stop:

	CMP R3, 0x61												@checking for bounds
 800022c:	2b61      	cmp	r3, #97	; 0x61

	BGE confirm_valid_lower_case_ascii_after_full_stop			@if greater than it may be a lowercase ascii character
 800022e:	da00      	bge.n	8000232 <confirm_valid_lower_case_ascii_after_full_stop>

	BLT lower_case_iteration_after_full_stop									@iterate to next value and start again
 8000230:	db05      	blt.n	800023e <lower_case_iteration_after_full_stop>

08000232 <confirm_valid_lower_case_ascii_after_full_stop>:

confirm_valid_lower_case_ascii_after_full_stop:

	CMP R3, 0x7B												@confirming if it is strictly a lowercase character
 8000232:	2b7b      	cmp	r3, #123	; 0x7b
																@ascii letter between 0x60 and 0x7a
	BLT to_upper												@make uppercase
 8000234:	dbe5      	blt.n	8000202 <to_upper>

	BGE lower_case_iteration_after_full_stop									@iterate again check lowercase after fullstop
 8000236:	da02      	bge.n	800023e <lower_case_iteration_after_full_stop>

08000238 <check_ascii_bounds>:

check_ascii_bounds:

	CMP R3, 0x7B												@confirming if it is strictly a lowercase character
 8000238:	2b7b      	cmp	r3, #123	; 0x7b
																@ascii letter between 0x60 and 0x7a
	BLT to_upper
 800023a:	dbe2      	blt.n	8000202 <to_upper>

	BGE lower_case_iteration_after_full_stop					@lower case iteration after full stop
 800023c:	daff      	bge.n	800023e <lower_case_iteration_after_full_stop>

0800023e <lower_case_iteration_after_full_stop>:

lower_case_iteration_after_full_stop:

	ADD R2, R2, 0x1												@next letter
 800023e:	f102 0201 	add.w	r2, r2, #1

	LDRB R3, [R1, R2]											@load byte (letter in ascii)
 8000242:	5c8b      	ldrb	r3, [r1, r2]

	B check_valid_upper_case_ascii_after_full_stop				@check if uppercase after full stop
 8000244:	e7ec      	b.n	8000220 <check_valid_upper_case_ascii_after_full_stop>

08000246 <check_valid_upper_case_ascii>:


check_valid_upper_case_ascii:

	CMP R3, 0x5B												@checking if uppercase
 8000246:	2b5b      	cmp	r3, #91	; 0x5b

	BLT check_upper												@check if uppercase
 8000248:	db02      	blt.n	8000250 <check_upper>

	ADD R2, R2, 0x1												@iterate to next offset in string
 800024a:	f102 0201 	add.w	r2, r2, #1

	B grab_letter												@start functions again
 800024e:	e7de      	b.n	800020e <grab_letter>

08000250 <check_upper>:

check_upper:

	CMP R3, 0x41												@confirming it is uppercase not a symbol
 8000250:	2b41      	cmp	r3, #65	; 0x41

	BGE make_lower												@make it lowercase
 8000252:	da02      	bge.n	800025a <make_lower>

	ADD R2, R2, 0x1												@iterate to next offset in string
 8000254:	f102 0201 	add.w	r2, r2, #1

	BLT grab_letter												@start program again
 8000258:	dbd9      	blt.n	800020e <grab_letter>

0800025a <make_lower>:

make_lower:

	ADD R3, R3, 0x20											@making the letter lowercase
 800025a:	f103 0320 	add.w	r3, r3, #32

	STRB R3, [R1, R2]											@storing it back into the string after manipulation
 800025e:	548b      	strb	r3, [r1, r2]

	B grab_letter												@start program again
 8000260:	e7d5      	b.n	800020e <grab_letter>

08000262 <iterate>:


iterate:

	ADD R2, R2, 0x1												@iterate to next offset in string
 8000262:	f102 0201 	add.w	r2, r2, #1

	B grab_letter												@start program again
 8000266:	e7d2      	b.n	800020e <grab_letter>
	LDR R1, =first_string										@load address for string into R1
 8000268:	20000000 	.word	0x20000000

0800026c <main>:
#endif

extern void assembly_function();

int main(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
    /* Loop forever */
	assembly_function();
 8000270:	f7ff ffb0 	bl	80001d4 <assembly_function>
	for(;;);
 8000274:	e7fe      	b.n	8000274 <main+0x8>
	...

08000278 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000278:	480d      	ldr	r0, [pc, #52]	; (80002b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800027a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800027c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000280:	480c      	ldr	r0, [pc, #48]	; (80002b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000282:	490d      	ldr	r1, [pc, #52]	; (80002b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000284:	4a0d      	ldr	r2, [pc, #52]	; (80002bc <LoopForever+0xe>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000288:	e002      	b.n	8000290 <LoopCopyDataInit>

0800028a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800028a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800028c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028e:	3304      	adds	r3, #4

08000290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000294:	d3f9      	bcc.n	800028a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000296:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000298:	4c0a      	ldr	r4, [pc, #40]	; (80002c4 <LoopForever+0x16>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800029c:	e001      	b.n	80002a2 <LoopFillZerobss>

0800029e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a0:	3204      	adds	r2, #4

080002a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a4:	d3fb      	bcc.n	800029e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002a6:	f000 f811 	bl	80002cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002aa:	f7ff ffdf 	bl	800026c <main>

080002ae <LoopForever>:

LoopForever:
  b LoopForever
 80002ae:	e7fe      	b.n	80002ae <LoopForever>
  ldr   r0, =_estack
 80002b0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80002b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b8:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80002bc:	08000334 	.word	0x08000334
  ldr r2, =_sbss
 80002c0:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80002c4:	20000050 	.word	0x20000050

080002c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c8:	e7fe      	b.n	80002c8 <ADC1_2_IRQHandler>
	...

080002cc <__libc_init_array>:
 80002cc:	b570      	push	{r4, r5, r6, lr}
 80002ce:	4d0d      	ldr	r5, [pc, #52]	; (8000304 <__libc_init_array+0x38>)
 80002d0:	4c0d      	ldr	r4, [pc, #52]	; (8000308 <__libc_init_array+0x3c>)
 80002d2:	1b64      	subs	r4, r4, r5
 80002d4:	10a4      	asrs	r4, r4, #2
 80002d6:	2600      	movs	r6, #0
 80002d8:	42a6      	cmp	r6, r4
 80002da:	d109      	bne.n	80002f0 <__libc_init_array+0x24>
 80002dc:	4d0b      	ldr	r5, [pc, #44]	; (800030c <__libc_init_array+0x40>)
 80002de:	4c0c      	ldr	r4, [pc, #48]	; (8000310 <__libc_init_array+0x44>)
 80002e0:	f000 f818 	bl	8000314 <_init>
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	10a4      	asrs	r4, r4, #2
 80002e8:	2600      	movs	r6, #0
 80002ea:	42a6      	cmp	r6, r4
 80002ec:	d105      	bne.n	80002fa <__libc_init_array+0x2e>
 80002ee:	bd70      	pop	{r4, r5, r6, pc}
 80002f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80002f4:	4798      	blx	r3
 80002f6:	3601      	adds	r6, #1
 80002f8:	e7ee      	b.n	80002d8 <__libc_init_array+0xc>
 80002fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80002fe:	4798      	blx	r3
 8000300:	3601      	adds	r6, #1
 8000302:	e7f2      	b.n	80002ea <__libc_init_array+0x1e>
 8000304:	0800032c 	.word	0x0800032c
 8000308:	0800032c 	.word	0x0800032c
 800030c:	0800032c 	.word	0x0800032c
 8000310:	08000330 	.word	0x08000330

08000314 <_init>:
 8000314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000316:	bf00      	nop
 8000318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800031a:	bc08      	pop	{r3}
 800031c:	469e      	mov	lr, r3
 800031e:	4770      	bx	lr

08000320 <_fini>:
 8000320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000322:	bf00      	nop
 8000324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000326:	bc08      	pop	{r3}
 8000328:	469e      	mov	lr, r3
 800032a:	4770      	bx	lr

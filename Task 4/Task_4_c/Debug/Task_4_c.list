
Task_4_c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001bc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000350  08000358  00010358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000350  08000350  00010358  2**0
                  CONTENTS
  4 .ARM          00000000  08000350  08000350  00010358  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000350  08000358  00010358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000350  08000350  00010350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000354  08000354  00010354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010358  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010358  2**0
                  CONTENTS, READONLY
 13 .debug_info   000000dc  00000000  00000000  00010388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000087  00000000  00000000  00010464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  000104f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000030  00000000  00000000  00010558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f34  00000000  00000000  00010588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000497  00000000  00000000  000114bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003aff  00000000  00000000  00011953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00015452  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  000154a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000338 	.word	0x08000338

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000338 	.word	0x08000338

080001d4 <assembly_function>:
.text

assembly_function:


	BL enableTimer
 80001d4:	f000 f844 	bl	8000260 <enableTimer>
	BL enableGPIOClocks
 80001d8:	f000 f848 	bl	800026c <enableGPIOClocks>
	BL enableLEDs
 80001dc:	f000 f84c 	bl	8000278 <enableLEDs>

	// Load base address for timer 2
	LDR R0, =TIM2
 80001e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000

	// Enable the counter bit 0 and bit 7 and bit 2 of CR1
	MOV R1, #0b010000101
 80001e4:	f04f 0185 	mov.w	r1, #133	; 0x85
	STR R1, [R0, TIM_CR1]
 80001e8:	6001      	str	r1, [r0, #0]

	//Output for LEDs
	LDR R6, =GPIOE
 80001ea:	4e26      	ldr	r6, [pc, #152]	; (8000284 <enableLEDs+0xc>)

	//Set Prescaler
	MOV R1, #0x7D					@ prescaler of 125
 80001ec:	f04f 017d 	mov.w	r1, #125	; 0x7d
	LDR R2, =TIM_PSC                @ Load offset address for prescaler
 80001f0:	f04f 0228 	mov.w	r2, #40	; 0x28
	STR R1, [R0, R2]                @ Store prescaler value in timer address
 80001f4:	5081      	str	r1, [r0, r2]

080001f6 <make_delay>:


	//Set ARR
	make_delay:

	LDR R0, =TIM2					@ Base address for timer 2
 80001f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000

	LDR R4, =0x7A1200 				@ Clock speed of 8MHz
 80001fa:	4c23      	ldr	r4, [pc, #140]	; (8000288 <enableLEDs+0x10>)

	LDR R2, =0x3E8					@ 1000
 80001fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

	LDR R3, =0x7D			        @ PSC VALUE
 8000200:	f04f 037d 	mov.w	r3, #125	; 0x7d

	LDR R1, =DELAYTIME				@ load delay time
 8000204:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0

	@ ARR = delay time x Clock Speed / PRESCALAR x 1000

	UDIV R1, R1, R2					@ delay time / 1000
 8000208:	fbb1 f1f2 	udiv	r1, r1, r2

	UDIV R4, R4, R3					@ clock speed / PSC VALUE
 800020c:	fbb4 f4f3 	udiv	r4, r4, r3

	MUL R1, R1, R4					@ delay time x Clock Speed / PSC VALUE
 8000210:	fb01 f104 	mul.w	r1, r1, r4


	//Timer  overflow
	LDR R2, =TIM_ARR
 8000214:	f04f 022c 	mov.w	r2, #44	; 0x2c
	STR R1, [R0, R2]
 8000218:	5081      	str	r1, [r0, r2]



	//Setting TIM_EGR bit 0 to 1
	LDR R1, [R0, TIM_EGR]
 800021a:	6941      	ldr	r1, [r0, #20]
	ORR R1, 0b0001 << 0
 800021c:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, TIM_EGR]
 8000220:	6141      	str	r1, [r0, #20]

08000222 <onTime>:

	# Set UIF flag to zero again because it's raised when we enable it****

	//MOV R1, #0b0

	LDR R1, [R0, TIM_SR]
 8000222:	6901      	ldr	r1, [r0, #16]
	LDR R2, =#0xfffe
 8000224:	f64f 72fe 	movw	r2, #65534	; 0xfffe

	AND R1, R2
 8000228:	ea01 0102 	and.w	r1, r1, r2
	STR R1, [R0, TIM_SR]
 800022c:	6101      	str	r1, [r0, #16]


	# Turn on LEDs
	LDR R7, =0b11111111
 800022e:	f04f 07ff 	mov.w	r7, #255	; 0xff
	STRB R7, [R6, #ODR + 1]
 8000232:	7577      	strb	r7, [r6, #21]

	# Check status register for UIF flag  BIT 0
	LDR R1, [R0, TIM_SR]
 8000234:	6901      	ldr	r1, [r0, #16]
	LDR R2, =0b00000001
 8000236:	f04f 0201 	mov.w	r2, #1
	TST R2, R1 @if ANDS is 1, UIF flag is raised (delay time is over).
 800023a:	420a      	tst	r2, r1
	            @if ANDS is 0, UIF flag is raised (still keep looping in onTime)

	# Branch to appropriate subroutine
	BEQ onTime
 800023c:	d0f1      	beq.n	8000222 <onTime>

0800023e <offTime>:

	# Set UIF flag to zero again because it's raised when we enable it****

	//MOV R1, #0b0

	LDR R1, [R0, TIM_SR]
 800023e:	6901      	ldr	r1, [r0, #16]
	LDR R2, =#0xfffe
 8000240:	f64f 72fe 	movw	r2, #65534	; 0xfffe

	AND R1, R2
 8000244:	ea01 0102 	and.w	r1, r1, r2
	STR R1, [R0, TIM_SR]
 8000248:	6101      	str	r1, [r0, #16]


	# Turn off LEDs
	LDR R7, =0b00000000
 800024a:	f04f 0700 	mov.w	r7, #0
	STRB R7, [R6, #ODR + 1]
 800024e:	7577      	strb	r7, [r6, #21]

	# Check status register for UIF flag  BIT 0
	LDR R1, [R0, TIM_SR]
 8000250:	6901      	ldr	r1, [r0, #16]
	LDR R2, =0b00000001
 8000252:	f04f 0201 	mov.w	r2, #1
	TST R2, R1 @if ANDS is 1, UIF flag is raised (delay time is over).
 8000256:	420a      	tst	r2, r1
	            @if ANDS is 0, UIF flag is raised (still keep looping in onTime)


	# Branch to appropriate subroutine
	BEQ offTime
 8000258:	d0f1      	beq.n	800023e <offTime>

0800025a <clear2>:



clear2:
	//Reset the clock
	LDR R7, =0x00
 800025a:	f04f 0700 	mov.w	r7, #0
	STR R7, [R0, TIM_CNT]
 800025e:	6247      	str	r7, [r0, #36]	; 0x24

08000260 <enableTimer>:

// Enable Timer 2 by setting relevant bit in APB1ENR
enableTimer:

	// Enable Timer 2 clock
	LDR R0, =RCC
 8000260:	480a      	ldr	r0, [pc, #40]	; (800028c <enableLEDs+0x14>)
	LDR R1, [R0, APB1ENR]
 8000262:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << TIM2EN
 8000264:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, APB1ENR]
 8000268:	61c1      	str	r1, [r0, #28]
	// Set value to be compared against
	LDR R1, =0x10000				@2^16
	STR R1, [R0, TIM_CCR1]
*/

	BX LR
 800026a:	4770      	bx	lr

0800026c <enableGPIOClocks>:

// Enable clocks for GPIO ports through AHBENR register
enableGPIOClocks:
	LDR R0, =RCC
 800026c:	4807      	ldr	r0, [pc, #28]	; (800028c <enableLEDs+0x14>)
	LDR R1, [R0, #AHBENR]
 800026e:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOA_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOE_ENABLE
 8000270:	f441 1128 	orr.w	r1, r1, #2752512	; 0x2a0000
	STR R1, [R0, #AHBENR]
 8000274:	6141      	str	r1, [r0, #20]
	BX LR
 8000276:	4770      	bx	lr

08000278 <enableLEDs>:

// Enable LEDs by setting relevant PORT E pins to output through MODER register
enableLEDs:
	LDR R0, =GPIOE
 8000278:	4802      	ldr	r0, [pc, #8]	; (8000284 <enableLEDs+0xc>)
	LDR R1, =0x5555
 800027a:	f245 5155 	movw	r1, #21845	; 0x5555
	STRH R1, [R0, #MODER + 2]
 800027e:	8041      	strh	r1, [r0, #2]
	BX LR
 8000280:	4770      	bx	lr
 8000282:	0000      	.short	0x0000
	LDR R6, =GPIOE
 8000284:	48001000 	.word	0x48001000
	LDR R4, =0x7A1200 				@ Clock speed of 8MHz
 8000288:	007a1200 	.word	0x007a1200
	LDR R0, =RCC
 800028c:	40021000 	.word	0x40021000

08000290 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	assembly_function();
 8000294:	f7ff ff9e 	bl	80001d4 <assembly_function>
    /* Loop forever */
	for(;;);
 8000298:	e7fe      	b.n	8000298 <main+0x8>
	...

0800029c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800029c:	480d      	ldr	r0, [pc, #52]	; (80002d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800029e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a4:	480c      	ldr	r0, [pc, #48]	; (80002d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002a6:	490d      	ldr	r1, [pc, #52]	; (80002dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a8:	4a0d      	ldr	r2, [pc, #52]	; (80002e0 <LoopForever+0xe>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ac:	e002      	b.n	80002b4 <LoopCopyDataInit>

080002ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b2:	3304      	adds	r3, #4

080002b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b8:	d3f9      	bcc.n	80002ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ba:	4a0a      	ldr	r2, [pc, #40]	; (80002e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002bc:	4c0a      	ldr	r4, [pc, #40]	; (80002e8 <LoopForever+0x16>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c0:	e001      	b.n	80002c6 <LoopFillZerobss>

080002c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c4:	3204      	adds	r2, #4

080002c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c8:	d3fb      	bcc.n	80002c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ca:	f000 f811 	bl	80002f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ce:	f7ff ffdf 	bl	8000290 <main>

080002d2 <LoopForever>:

LoopForever:
  b LoopForever
 80002d2:	e7fe      	b.n	80002d2 <LoopForever>
  ldr   r0, =_estack
 80002d4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80002d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002dc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e0:	08000358 	.word	0x08000358
  ldr r2, =_sbss
 80002e4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002e8:	2000001c 	.word	0x2000001c

080002ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002ec:	e7fe      	b.n	80002ec <ADC1_2_IRQHandler>
	...

080002f0 <__libc_init_array>:
 80002f0:	b570      	push	{r4, r5, r6, lr}
 80002f2:	4d0d      	ldr	r5, [pc, #52]	; (8000328 <__libc_init_array+0x38>)
 80002f4:	4c0d      	ldr	r4, [pc, #52]	; (800032c <__libc_init_array+0x3c>)
 80002f6:	1b64      	subs	r4, r4, r5
 80002f8:	10a4      	asrs	r4, r4, #2
 80002fa:	2600      	movs	r6, #0
 80002fc:	42a6      	cmp	r6, r4
 80002fe:	d109      	bne.n	8000314 <__libc_init_array+0x24>
 8000300:	4d0b      	ldr	r5, [pc, #44]	; (8000330 <__libc_init_array+0x40>)
 8000302:	4c0c      	ldr	r4, [pc, #48]	; (8000334 <__libc_init_array+0x44>)
 8000304:	f000 f818 	bl	8000338 <_init>
 8000308:	1b64      	subs	r4, r4, r5
 800030a:	10a4      	asrs	r4, r4, #2
 800030c:	2600      	movs	r6, #0
 800030e:	42a6      	cmp	r6, r4
 8000310:	d105      	bne.n	800031e <__libc_init_array+0x2e>
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	f855 3b04 	ldr.w	r3, [r5], #4
 8000318:	4798      	blx	r3
 800031a:	3601      	adds	r6, #1
 800031c:	e7ee      	b.n	80002fc <__libc_init_array+0xc>
 800031e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000322:	4798      	blx	r3
 8000324:	3601      	adds	r6, #1
 8000326:	e7f2      	b.n	800030e <__libc_init_array+0x1e>
 8000328:	08000350 	.word	0x08000350
 800032c:	08000350 	.word	0x08000350
 8000330:	08000350 	.word	0x08000350
 8000334:	08000354 	.word	0x08000354

08000338 <_init>:
 8000338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033a:	bf00      	nop
 800033c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033e:	bc08      	pop	{r3}
 8000340:	469e      	mov	lr, r3
 8000342:	4770      	bx	lr

08000344 <_fini>:
 8000344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000346:	bf00      	nop
 8000348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034a:	bc08      	pop	{r3}
 800034c:	469e      	mov	lr, r3
 800034e:	4770      	bx	lr

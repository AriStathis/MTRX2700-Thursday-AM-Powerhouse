
Task-4-b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001b4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000348  08000350  00010350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000348  08000348  00010350  2**0
                  CONTENTS
  4 .ARM          00000000  08000348  08000348  00010350  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000348  08000350  00010350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000348  08000348  00010348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800034c  0800034c  0001034c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010350  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010350  2**0
                  CONTENTS, READONLY
 13 .debug_line   000004b7  00000000  00000000  00010380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000000dc  00000000  00000000  00010837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000087  00000000  00000000  00010913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000068  00000000  00000000  000109a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00003afb  00000000  00000000  00010a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000030  00000000  00000000  00014508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00000f34  00000000  00000000  00014538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001546c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  000154bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000330 	.word	0x08000330

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000330 	.word	0x08000330

080001d4 <assembly_function>:
.text

assembly_function:


	BL enableTimer
 80001d4:	f000 f82e 	bl	8000234 <enableTimer>
	BL enableGPIOClocks
 80001d8:	f000 f83f 	bl	800025a <enableGPIOClocks>
	BL enableLEDs
 80001dc:	f000 f843 	bl	8000266 <enableLEDs>
	BL initialise_discovery_board
 80001e0:	f000 f846 	bl	8000270 <initialise_discovery_board>

	LDR R0, =TIM2					@ Load base address for timer 2
 80001e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000


	MOV R1, #0b1					@ Enable the counter
 80001e8:	f04f 0101 	mov.w	r1, #1

	STR R1, [R0, TIM_CR1]
 80001ec:	6001      	str	r1, [r0, #0]

	LDR R6, =GPIOE					@ Output for LEDs
 80001ee:	4e24      	ldr	r6, [pc, #144]	; (8000280 <initialise_discovery_board+0x10>)


	MOV R1, #0x7D					@ Prescaler of 125 --> 1s
 80001f0:	f04f 017d 	mov.w	r1, #125	; 0x7d
	//MOV R1, #0xFA					@ Prescaler of 250 --> 2s
	//MOV R1, #0x1F4				@ Presclaer of 500 --> 4s

	LDR R2, =TIM_PSC
 80001f4:	f04f 0228 	mov.w	r2, #40	; 0x28
	STR R1, [R0, R2]
 80001f8:	5081      	str	r1, [r0, r2]

	MOV R1, #0x10000				@ Count up to 2^16
 80001fa:	f44f 3180 	mov.w	r1, #65536	; 0x10000

	LDR R2, =TIM_ARR
 80001fe:	f04f 022c 	mov.w	r2, #44	; 0x2c
	STR R1, [R0, R2]
 8000202:	5081      	str	r1, [r0, r2]

08000204 <on_time>:


on_time:

	LDR R7, =0b11111111				@ Turn on LEDs
 8000204:	f04f 07ff 	mov.w	r7, #255	; 0xff

	STRB R7, [R6, #ODR + 1]
 8000208:	7577      	strb	r7, [r6, #21]

	BL check_flag_and_clear
 800020a:	f000 f806 	bl	800021a <check_flag_and_clear>

0800020e <off_time>:


off_time:

	LDR R7, =0b00000000				@ Clear all LEDs
 800020e:	f04f 0700 	mov.w	r7, #0

	STRB R7, [R6, #ODR + 1]			@ Store clear in appropriate status register
 8000212:	7577      	strb	r7, [r6, #21]

	BL check_flag_and_clear
 8000214:	f000 f801 	bl	800021a <check_flag_and_clear>

	B on_time						@ Recheck output compare address
 8000218:	e7f4      	b.n	8000204 <on_time>

0800021a <check_flag_and_clear>:



check_flag_and_clear:

	LDR R1, [R0, TIM_SR]			@ Check status register to check for output compare
 800021a:	6901      	ldr	r1, [r0, #16]

	LDR R2, =0b00000010				@ Value to check against
 800021c:	f04f 0202 	mov.w	r2, #2

	TST R2, R1						@ Test if status register is toggled
 8000220:	420a      	tst	r2, r1

	BGT clear						@ Branch to on time clear
 8000222:	dc00      	bgt.n	8000226 <clear>

	B check_flag_and_clear
 8000224:	e7f9      	b.n	800021a <check_flag_and_clear>

08000226 <clear>:

clear:

	LDR R7, =0x0					@ Clear clock
 8000226:	f04f 0700 	mov.w	r7, #0

	STR R7, [R0, TIM_CNT]			@ Store in appropriate address
 800022a:	6247      	str	r7, [r0, #36]	; 0x24

	LDR R7, =0b00000000				@ Clear flag
 800022c:	f04f 0700 	mov.w	r7, #0

	STRB R7, [R0, TIM_SR]			@ Store in appropriate flag
 8000230:	7407      	strb	r7, [r0, #16]

	BX LR
 8000232:	4770      	bx	lr

08000234 <enableTimer>:

// Enable Timer 2 by setting relevant bit in APB1ENR
enableTimer:

	// Enable Timer 2 clock
	LDR R0, =RCC
 8000234:	4813      	ldr	r0, [pc, #76]	; (8000284 <initialise_discovery_board+0x14>)
	LDR R1, [R0, APB1ENR]
 8000236:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << TIM2EN
 8000238:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, APB1ENR]
 800023c:	61c1      	str	r1, [r0, #28]

	// Set timer 2 channel 1 to output compare
	LDR R0, =TIM2
 800023e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	LDR R1, [R0, TIM_CCER]
 8000242:	6a01      	ldr	r1, [r0, #32]
	ORR R1, 1 << 0x0
 8000244:	f041 0101 	orr.w	r1, r1, #1
	STRB R1, [R0, TIM_CCER]
 8000248:	f880 1020 	strb.w	r1, [r0, #32]

	// Set timer 2 channel 1 to toggle on successful output compare
	LDR R1, =0x30
 800024c:	f04f 0130 	mov.w	r1, #48	; 0x30
	STRB R1, [R0, TIM_CCMR1]
 8000250:	7601      	strb	r1, [r0, #24]

	// Set value to be compared against
	LDR R1, =0x10000				@2^16
 8000252:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	STR R1, [R0, TIM_CCR1]
 8000256:	6341      	str	r1, [r0, #52]	; 0x34

	BX LR
 8000258:	4770      	bx	lr

0800025a <enableGPIOClocks>:

// Enable clocks for GPIO ports through AHBENR register
enableGPIOClocks:
	LDR R0, =RCC
 800025a:	480a      	ldr	r0, [pc, #40]	; (8000284 <initialise_discovery_board+0x14>)
	LDR R1, [R0, #AHBENR]
 800025c:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOA_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOE_ENABLE
 800025e:	f441 1128 	orr.w	r1, r1, #2752512	; 0x2a0000
	STR R1, [R0, #AHBENR]
 8000262:	6141      	str	r1, [r0, #20]
	BX LR
 8000264:	4770      	bx	lr

08000266 <enableLEDs>:

// Enable LEDs by setting relevant PORT E pins to output through MODER register
enableLEDs:
	LDR R0, =GPIOE
 8000266:	4806      	ldr	r0, [pc, #24]	; (8000280 <initialise_discovery_board+0x10>)
	LDR R1, =0x5555
 8000268:	f245 5155 	movw	r1, #21845	; 0x5555
	STRH R1, [R0, #MODER + 2]
 800026c:	8041      	strh	r1, [r0, #2]
	BX LR
 800026e:	4770      	bx	lr

08000270 <initialise_discovery_board>:

@ initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R10, =GPIOE 					@ load the address of the GPIOE register into R0
 8000270:	f8df a00c 	ldr.w	sl, [pc, #12]	; 8000280 <initialise_discovery_board+0x10>
	LDR R11, =0x5555  					@ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 8000274:	f245 5b55 	movw	fp, #21845	; 0x5555

	STRH R11, [R10, #MODER + 2]   		@ store the new register values in the top half word representing
 8000278:	f8aa b002 	strh.w	fp, [sl, #2]
										@ the MODER settings for pe8-15
	BX LR 								@ return from function call
 800027c:	4770      	bx	lr
 800027e:	0000      	.short	0x0000
	LDR R6, =GPIOE					@ Output for LEDs
 8000280:	48001000 	.word	0x48001000
	LDR R0, =RCC
 8000284:	40021000 	.word	0x40021000

08000288 <main>:
#endif

extern void assembly_function();

int main(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	assembly_function();
 800028c:	f7ff ffa2 	bl	80001d4 <assembly_function>
    /* Loop forever */
	for(;;);
 8000290:	e7fe      	b.n	8000290 <main+0x8>
	...

08000294 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000294:	480d      	ldr	r0, [pc, #52]	; (80002cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000296:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000298:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800029c:	480c      	ldr	r0, [pc, #48]	; (80002d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800029e:	490d      	ldr	r1, [pc, #52]	; (80002d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a0:	4a0d      	ldr	r2, [pc, #52]	; (80002d8 <LoopForever+0xe>)
  movs r3, #0
 80002a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a4:	e002      	b.n	80002ac <LoopCopyDataInit>

080002a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002aa:	3304      	adds	r3, #4

080002ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b0:	d3f9      	bcc.n	80002a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002b2:	4a0a      	ldr	r2, [pc, #40]	; (80002dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b4:	4c0a      	ldr	r4, [pc, #40]	; (80002e0 <LoopForever+0x16>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b8:	e001      	b.n	80002be <LoopFillZerobss>

080002ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002bc:	3204      	adds	r2, #4

080002be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c0:	d3fb      	bcc.n	80002ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002c2:	f000 f811 	bl	80002e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c6:	f7ff ffdf 	bl	8000288 <main>

080002ca <LoopForever>:

LoopForever:
  b LoopForever
 80002ca:	e7fe      	b.n	80002ca <LoopForever>
  ldr   r0, =_estack
 80002cc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80002d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d8:	08000350 	.word	0x08000350
  ldr r2, =_sbss
 80002dc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002e0:	2000001c 	.word	0x2000001c

080002e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e4:	e7fe      	b.n	80002e4 <ADC1_2_IRQHandler>
	...

080002e8 <__libc_init_array>:
 80002e8:	b570      	push	{r4, r5, r6, lr}
 80002ea:	4d0d      	ldr	r5, [pc, #52]	; (8000320 <__libc_init_array+0x38>)
 80002ec:	4c0d      	ldr	r4, [pc, #52]	; (8000324 <__libc_init_array+0x3c>)
 80002ee:	1b64      	subs	r4, r4, r5
 80002f0:	10a4      	asrs	r4, r4, #2
 80002f2:	2600      	movs	r6, #0
 80002f4:	42a6      	cmp	r6, r4
 80002f6:	d109      	bne.n	800030c <__libc_init_array+0x24>
 80002f8:	4d0b      	ldr	r5, [pc, #44]	; (8000328 <__libc_init_array+0x40>)
 80002fa:	4c0c      	ldr	r4, [pc, #48]	; (800032c <__libc_init_array+0x44>)
 80002fc:	f000 f818 	bl	8000330 <_init>
 8000300:	1b64      	subs	r4, r4, r5
 8000302:	10a4      	asrs	r4, r4, #2
 8000304:	2600      	movs	r6, #0
 8000306:	42a6      	cmp	r6, r4
 8000308:	d105      	bne.n	8000316 <__libc_init_array+0x2e>
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000310:	4798      	blx	r3
 8000312:	3601      	adds	r6, #1
 8000314:	e7ee      	b.n	80002f4 <__libc_init_array+0xc>
 8000316:	f855 3b04 	ldr.w	r3, [r5], #4
 800031a:	4798      	blx	r3
 800031c:	3601      	adds	r6, #1
 800031e:	e7f2      	b.n	8000306 <__libc_init_array+0x1e>
 8000320:	08000348 	.word	0x08000348
 8000324:	08000348 	.word	0x08000348
 8000328:	08000348 	.word	0x08000348
 800032c:	0800034c 	.word	0x0800034c

08000330 <_init>:
 8000330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000332:	bf00      	nop
 8000334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000336:	bc08      	pop	{r3}
 8000338:	469e      	mov	lr, r3
 800033a:	4770      	bx	lr

0800033c <_fini>:
 800033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033e:	bf00      	nop
 8000340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000342:	bc08      	pop	{r3}
 8000344:	469e      	mov	lr, r3
 8000346:	4770      	bx	lr

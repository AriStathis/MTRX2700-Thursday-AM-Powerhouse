
Task-2.4.2-b.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000150  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002e4  080002e4  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002e4  080002e4  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  080002e4  080002e4  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002e4  080002e4  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002e4  080002e4  000102e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002e8  080002e8  000102e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  080002ec  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020040  2**0
                  CONTENTS
 10 .bss          0000001c  20000040  20000040  00020040  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000005c  2000005c  00020040  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_line   00000497  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000000dc  00000000  00000000  00020507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000087  00000000  00000000  000205e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000068  00000000  00000000  00020670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00003aff  00000000  00000000  000206d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000030  00000000  00000000  000241d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00000f34  00000000  00000000  00024208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002513c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  0002518c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000040 	.word	0x20000040
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080002cc 	.word	0x080002cc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000044 	.word	0x20000044
 80001d0:	080002cc 	.word	0x080002cc

080001d4 <assembly_function>:
@ define text

@ this is the entry function called from the c file
assembly_function:

	LDR R1, =string						@ Load address of string into R1
 80001d4:	490f      	ldr	r1, [pc, #60]	; (8000214 <initialise_discovery_board+0xc>)
	MOV R3, #0x0						@ Iterate through string
 80001d6:	f04f 0300 	mov.w	r3, #0

	@ Branch with link to set the clocks for the I/O and UART
	BL enable_peripheral_clocks
 80001da:	f000 f80f 	bl	80001fc <enable_peripheral_clocks>

	@ Once the clocks are started, need to initialise the discovery board I/O
	BL initialise_discovery_board
 80001de:	f000 f813 	bl	8000208 <initialise_discovery_board>

080001e2 <get_letter>:


get_letter:

	LDR R2, [R1, R3]
 80001e2:	58ca      	ldr	r2, [r1, r3]

	LDR R0, =GPIOE 		 			@ load the address of the GPIOE register into R0
 80001e4:	480c      	ldr	r0, [pc, #48]	; (8000218 <initialise_discovery_board+0x10>)

	B light_up_letter
 80001e6:	e7ff      	b.n	80001e8 <light_up_letter>

080001e8 <light_up_letter>:


light_up_letter:

	STRB R2, [R0, #ODR + 1]   		@ store this to the second byte of the ODR (bits 8-15)
 80001e8:	7542      	strb	r2, [r0, #21]

	ADD R3, R3, 0x01				@ Iterate through the string
 80001ea:	f103 0301 	add.w	r3, r3, #1

	BL delay_function
 80001ee:	f000 f801 	bl	80001f4 <delay_function>

	B get_letter
 80001f2:	e7f6      	b.n	80001e2 <get_letter>

080001f4 <delay_function>:

delay_function:
	LDR R6, =0x0FF001
 80001f4:	4e09      	ldr	r6, [pc, #36]	; (800021c <initialise_discovery_board+0x14>)

080001f6 <not_finished_yet>:

	@ we continue to subtract one from R6 while the result is not zero,
	@ then return to where the delay_function was called
not_finished_yet:
	SUBS R6, 0x01
 80001f6:	3e01      	subs	r6, #1
	BNE not_finished_yet
 80001f8:	d1fd      	bne.n	80001f6 <not_finished_yet>

	BX LR 							@ return from function call
 80001fa:	4770      	bx	lr

080001fc <enable_peripheral_clocks>:


@ enable the clocks for peripherals (GPIOA, C and E)
enable_peripheral_clocks:
	LDR R0, =RCC  					@ load the address of the RCC address boundary (for enabling the IO clock)
 80001fc:	4808      	ldr	r0, [pc, #32]	; (8000220 <initialise_discovery_board+0x18>)
	LDR R7, [R0, #AHBENR] 			@ load the current value of the peripheral clock registers
 80001fe:	6947      	ldr	r7, [r0, #20]
	ORR R7, 1 << GPIOA_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOE_ENABLE  @ 21st bit is enable GPIOE clock, 17 is GPIOA clock
 8000200:	f447 1728 	orr.w	r7, r7, #2752512	; 0x2a0000
	STR R7, [R0, #AHBENR]  			@ store the modified register back to the submodule
 8000204:	6147      	str	r7, [r0, #20]
	BX LR 							@ return from function call
 8000206:	4770      	bx	lr

08000208 <initialise_discovery_board>:


@ initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R0, =GPIOE 					@ load the address of the GPIOE register into R0
 8000208:	4803      	ldr	r0, [pc, #12]	; (8000218 <initialise_discovery_board+0x10>)
	LDR R7, =0x5555  				@ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 800020a:	f245 5755 	movw	r7, #21845	; 0x5555
									@ as 0x5555 = 01010101 01010101
	STRH R7, [R0, #MODER + 2]   	@ store the new register values in the top half word representing
 800020e:	8047      	strh	r7, [r0, #2]
									@ the MODER settings for pe8-15
	BX LR							@ return from function call
 8000210:	4770      	bx	lr
 8000212:	0000      	.short	0x0000
	LDR R1, =string						@ Load address of string into R1
 8000214:	2000001b 	.word	0x2000001b
	LDR R0, =GPIOE 		 			@ load the address of the GPIOE register into R0
 8000218:	48001000 	.word	0x48001000
	LDR R6, =0x0FF001
 800021c:	000ff001 	.word	0x000ff001
	LDR R0, =RCC  					@ load the address of the RCC address boundary (for enabling the IO clock)
 8000220:	40021000 	.word	0x40021000

08000224 <main>:
#endif

extern void assembly_function();

int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	assembly_function();
 8000228:	f7ff ffd4 	bl	80001d4 <assembly_function>
    /* Loop forever */
	for(;;);
 800022c:	e7fe      	b.n	800022c <main+0x8>
	...

08000230 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000230:	480d      	ldr	r0, [pc, #52]	; (8000268 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000232:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000234:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000238:	480c      	ldr	r0, [pc, #48]	; (800026c <LoopForever+0x6>)
  ldr r1, =_edata
 800023a:	490d      	ldr	r1, [pc, #52]	; (8000270 <LoopForever+0xa>)
  ldr r2, =_sidata
 800023c:	4a0d      	ldr	r2, [pc, #52]	; (8000274 <LoopForever+0xe>)
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000240:	e002      	b.n	8000248 <LoopCopyDataInit>

08000242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000246:	3304      	adds	r3, #4

08000248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800024a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800024c:	d3f9      	bcc.n	8000242 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800024e:	4a0a      	ldr	r2, [pc, #40]	; (8000278 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000250:	4c0a      	ldr	r4, [pc, #40]	; (800027c <LoopForever+0x16>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000254:	e001      	b.n	800025a <LoopFillZerobss>

08000256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000258:	3204      	adds	r2, #4

0800025a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800025a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800025c:	d3fb      	bcc.n	8000256 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800025e:	f000 f811 	bl	8000284 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000262:	f7ff ffdf 	bl	8000224 <main>

08000266 <LoopForever>:

LoopForever:
  b LoopForever
 8000266:	e7fe      	b.n	8000266 <LoopForever>
  ldr   r0, =_estack
 8000268:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800026c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000270:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8000274:	080002ec 	.word	0x080002ec
  ldr r2, =_sbss
 8000278:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 800027c:	2000005c 	.word	0x2000005c

08000280 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000280:	e7fe      	b.n	8000280 <ADC1_2_IRQHandler>
	...

08000284 <__libc_init_array>:
 8000284:	b570      	push	{r4, r5, r6, lr}
 8000286:	4d0d      	ldr	r5, [pc, #52]	; (80002bc <__libc_init_array+0x38>)
 8000288:	4c0d      	ldr	r4, [pc, #52]	; (80002c0 <__libc_init_array+0x3c>)
 800028a:	1b64      	subs	r4, r4, r5
 800028c:	10a4      	asrs	r4, r4, #2
 800028e:	2600      	movs	r6, #0
 8000290:	42a6      	cmp	r6, r4
 8000292:	d109      	bne.n	80002a8 <__libc_init_array+0x24>
 8000294:	4d0b      	ldr	r5, [pc, #44]	; (80002c4 <__libc_init_array+0x40>)
 8000296:	4c0c      	ldr	r4, [pc, #48]	; (80002c8 <__libc_init_array+0x44>)
 8000298:	f000 f818 	bl	80002cc <_init>
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	10a4      	asrs	r4, r4, #2
 80002a0:	2600      	movs	r6, #0
 80002a2:	42a6      	cmp	r6, r4
 80002a4:	d105      	bne.n	80002b2 <__libc_init_array+0x2e>
 80002a6:	bd70      	pop	{r4, r5, r6, pc}
 80002a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ac:	4798      	blx	r3
 80002ae:	3601      	adds	r6, #1
 80002b0:	e7ee      	b.n	8000290 <__libc_init_array+0xc>
 80002b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80002b6:	4798      	blx	r3
 80002b8:	3601      	adds	r6, #1
 80002ba:	e7f2      	b.n	80002a2 <__libc_init_array+0x1e>
 80002bc:	080002e4 	.word	0x080002e4
 80002c0:	080002e4 	.word	0x080002e4
 80002c4:	080002e4 	.word	0x080002e4
 80002c8:	080002e8 	.word	0x080002e8

080002cc <_init>:
 80002cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ce:	bf00      	nop
 80002d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002d2:	bc08      	pop	{r3}
 80002d4:	469e      	mov	lr, r3
 80002d6:	4770      	bx	lr

080002d8 <_fini>:
 80002d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002da:	bf00      	nop
 80002dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002de:	bc08      	pop	{r3}
 80002e0:	469e      	mov	lr, r3
 80002e2:	4770      	bx	lr

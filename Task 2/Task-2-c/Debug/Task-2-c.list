
Task-2-c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001bc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000350  08000350  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000350  08000350  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  08000350  08000350  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000350  08000350  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000350  08000350  00010350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000354  08000354  00010354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08000358  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020044  2**0
                  CONTENTS
 10 .bss          0000001c  20000044  20000044  00020044  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000060  20000060  00020044  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_line   000004b7  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000000dc  00000000  00000000  0002052b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000087  00000000  00000000  00020607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000068  00000000  00000000  00020690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00003afb  00000000  00000000  000206f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000030  00000000  00000000  000241f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00000f34  00000000  00000000  00024228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002515c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  000251ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000044 	.word	0x20000044
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000338 	.word	0x08000338

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000048 	.word	0x20000048
 80001d0:	08000338 	.word	0x08000338

080001d4 <assembly_function>:

.text
@define code
assembly_function:

	LDR R3, =led_numbers			@load address for led numbers that are outputted through GPIO to LEDs
 80001d4:	4b28      	ldr	r3, [pc, #160]	; (8000278 <not_finished_yet+0x6>)

	LDR R4, =test_string			@load address for the string
 80001d6:	4c29      	ldr	r4, [pc, #164]	; (800027c <not_finished_yet+0xa>)
	MOV R2, #0x0					@start of iteration of test string
 80001d8:	f04f 0200 	mov.w	r2, #0

	LDR R1, =map_array				@load address for map into R1
 80001dc:	4928      	ldr	r1, [pc, #160]	; (8000280 <not_finished_yet+0xe>)
	MOV R9, #0x0					@start of iteration of map_array
 80001de:	f04f 0900 	mov.w	r9, #0

	LDR R12, =ERROR
 80001e2:	f04f 0cff 	mov.w	ip, #255	; 0xff

	@ Branch with link to set the clocks for the I/O and UART
	BL enable_peripheral_clocks
 80001e6:	f000 f833 	bl	8000250 <enable_peripheral_clocks>

	@ Once the clocks are started, need to initialise the discovery board I/O
	BL initialise_discovery_board
 80001ea:	f000 f83a 	bl	8000262 <initialise_discovery_board>

080001ee <get_letter>:


get_letter:

	MOV R9, #0x0					@reset and initialise offset of map array
 80001ee:	f04f 0900 	mov.w	r9, #0

	LDRB R5, [R4, R2]				@load the letter of the test string
 80001f2:	5ca5      	ldrb	r5, [r4, r2]

080001f4 <check_uppercase_and_lower_case>:


check_uppercase_and_lower_case:

	LDRB R6, [R1, R9]				@load letter in map array
 80001f4:	f811 6009 	ldrb.w	r6, [r1, r9]

	CMP R5, R6						@checking the test string against the letter array (lower case)
 80001f8:	42b5      	cmp	r5, r6

	BEQ load_map_lower_case			@it is a valid ASCII letter
 80001fa:	d00e      	beq.n	800021a <load_map_lower_case>

	SUB R6, R6, 0x20				@making it uppercase
 80001fc:	f1a6 0620 	sub.w	r6, r6, #32

	CMP R5, R6						@checking the test string against the letter array (upper case)
 8000200:	42b5      	cmp	r5, r6

	BEQ load_map_upper_case			@it is a valid ASCII letter
 8000202:	d00f      	beq.n	8000224 <load_map_upper_case>

	ADD R9, R9, 0x1					@next letter in our map array
 8000204:	f109 0901 	add.w	r9, r9, #1

	CMP R9, 0x19						@if it reaches the end of our test array then it is not a valid ascii character
 8000208:	f1b9 0f19 	cmp.w	r9, #25

	BEQ not_valid_ascii
 800020c:	d000      	beq.n	8000210 <not_valid_ascii>

	B check_uppercase_and_lower_case			@keep iterating through map until we find the letter that matches the map
 800020e:	e7f1      	b.n	80001f4 <check_uppercase_and_lower_case>

08000210 <not_valid_ascii>:

not_valid_ascii: @This is wher the error is

	LDR R8, =0b11111111
 8000210:	f04f 08ff 	mov.w	r8, #255	; 0xff

	ADD R2, R2, 0x1					@iterate into the next letter in the test string
 8000214:	f102 0201 	add.w	r2, r2, #1

	B wait_for_button				@start process again
 8000218:	e00b      	b.n	8000232 <wait_for_button>

0800021a <load_map_lower_case>:

load_map_lower_case:

	LDRB R8, [R3, R9]				@into R8 the mapped value i.e. turining it into a number
 800021a:	f813 8009 	ldrb.w	r8, [r3, r9]

	ADD R2, R2, 0x1					@iterate into the next letter in the test string
 800021e:	f102 0201 	add.w	r2, r2, #1

	B wait_for_button					@start process again
 8000222:	e006      	b.n	8000232 <wait_for_button>

08000224 <load_map_upper_case>:

load_map_upper_case:

	LDRB R8, [R3, R9]
 8000224:	f813 8009 	ldrb.w	r8, [r3, r9]

	ADD R8, R8, 0x19				@add by 25 in hex for a uppercase value, a = 0, A = 25 etc.
 8000228:	f108 0819 	add.w	r8, r8, #25

	ADD R2, R2, 0x1					@iterate to next letter in the test string
 800022c:	f102 0201 	add.w	r2, r2, #1

	B wait_for_button					@start process again
 8000230:	e7ff      	b.n	8000232 <wait_for_button>

08000232 <wait_for_button>:


wait_for_button:

	LDR R10, =GPIOA
 8000232:	f04f 4a90 	mov.w	sl, #1207959552	; 0x48000000

	LDRB R11, [R10, #IDR]
 8000236:	f89a b010 	ldrb.w	fp, [sl, #16]

	TST R11, #0x01
 800023a:	f01b 0f01 	tst.w	fp, #1

	BNE light_up_letter
 800023e:	d100      	bne.n	8000242 <light_up_letter>

	B wait_for_button
 8000240:	e7f7      	b.n	8000232 <wait_for_button>

08000242 <light_up_letter>:

light_up_letter:

	LDR R10, =GPIOE  				@ load the address of the GPIOE register into R0
 8000242:	f8df a040 	ldr.w	sl, [pc, #64]	; 8000284 <not_finished_yet+0x12>

	STRB R8, [R10, #ODR + 1]   		@ store this to the second byte of the ODR (bits 8-15)
 8000246:	f88a 8015 	strb.w	r8, [sl, #21]

	BL delay_function
 800024a:	f000 f811 	bl	8000270 <delay_function>

	B get_letter
 800024e:	e7ce      	b.n	80001ee <get_letter>

08000250 <enable_peripheral_clocks>:

@ enable the clocks for peripherals (GPIOA, C and E)
enable_peripheral_clocks:
	LDR R10, =RCC 						 	@ load the address of the RCC address boundary (for enabling the IO clock)
 8000250:	f8df a034 	ldr.w	sl, [pc, #52]	; 8000288 <not_finished_yet+0x16>
	LDR R11, [R10, #AHBENR]  				@ load the current value of the peripheral clock registers
 8000254:	f8da b014 	ldr.w	fp, [sl, #20]
	ORR R11, 1 << GPIOA_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOE_ENABLE  	@ 21st bit is enable GPIOE clock, 17 is GPIOA clock
 8000258:	f44b 1b28 	orr.w	fp, fp, #2752512	; 0x2a0000
	STR R11, [R10, #AHBENR]  			@ store the modified register back to the submodule
 800025c:	f8ca b014 	str.w	fp, [sl, #20]
	BX LR 								@ return from function call
 8000260:	4770      	bx	lr

08000262 <initialise_discovery_board>:

@ initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R10, =GPIOE 					@ load the address of the GPIOE register into R0
 8000262:	f8df a020 	ldr.w	sl, [pc, #32]	; 8000284 <not_finished_yet+0x12>
	LDR R11, =0x5555  					@ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 8000266:	f245 5b55 	movw	fp, #21845	; 0x5555

	STRH R11, [R10, #MODER + 2]   		@ store the new register values in the top half word representing
 800026a:	f8aa b002 	strh.w	fp, [sl, #2]
										@ the MODER settings for pe8-15
	BX LR 								@ return from function call
 800026e:	4770      	bx	lr

08000270 <delay_function>:


delay_function:
	LDR R6, =0x900FF
 8000270:	4e06      	ldr	r6, [pc, #24]	; (800028c <not_finished_yet+0x1a>)

08000272 <not_finished_yet>:
	@ we continue to subtract one from R6 while the result is not zero,
	@ then return to where the delay_function was called
not_finished_yet:
	SUBS R6, 0x01
 8000272:	3e01      	subs	r6, #1
	BNE not_finished_yet
 8000274:	d1fd      	bne.n	8000272 <not_finished_yet>

	BX LR @ return from function call
 8000276:	4770      	bx	lr
	LDR R3, =led_numbers			@load address for led numbers that are outputted through GPIO to LEDs
 8000278:	20000028 	.word	0x20000028
	LDR R4, =test_string			@load address for the string
 800027c:	2000001b 	.word	0x2000001b
	LDR R1, =map_array				@load address for map into R1
 8000280:	20000000 	.word	0x20000000
	LDR R10, =GPIOE  				@ load the address of the GPIOE register into R0
 8000284:	48001000 	.word	0x48001000
	LDR R10, =RCC 						 	@ load the address of the RCC address boundary (for enabling the IO clock)
 8000288:	40021000 	.word	0x40021000
	LDR R6, =0x900FF
 800028c:	000900ff 	.word	0x000900ff

08000290 <main>:
#endif

extern void assembly_function();

int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	assembly_function();
 8000294:	f7ff ff9e 	bl	80001d4 <assembly_function>
    /* Loop forever */
	for(;;);
 8000298:	e7fe      	b.n	8000298 <main+0x8>
	...

0800029c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800029c:	480d      	ldr	r0, [pc, #52]	; (80002d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800029e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a4:	480c      	ldr	r0, [pc, #48]	; (80002d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002a6:	490d      	ldr	r1, [pc, #52]	; (80002dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a8:	4a0d      	ldr	r2, [pc, #52]	; (80002e0 <LoopForever+0xe>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ac:	e002      	b.n	80002b4 <LoopCopyDataInit>

080002ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b2:	3304      	adds	r3, #4

080002b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b8:	d3f9      	bcc.n	80002ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ba:	4a0a      	ldr	r2, [pc, #40]	; (80002e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002bc:	4c0a      	ldr	r4, [pc, #40]	; (80002e8 <LoopForever+0x16>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c0:	e001      	b.n	80002c6 <LoopFillZerobss>

080002c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c4:	3204      	adds	r2, #4

080002c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c8:	d3fb      	bcc.n	80002c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ca:	f000 f811 	bl	80002f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ce:	f7ff ffdf 	bl	8000290 <main>

080002d2 <LoopForever>:

LoopForever:
  b LoopForever
 80002d2:	e7fe      	b.n	80002d2 <LoopForever>
  ldr   r0, =_estack
 80002d4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80002d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002dc:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 80002e0:	08000358 	.word	0x08000358
  ldr r2, =_sbss
 80002e4:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 80002e8:	20000060 	.word	0x20000060

080002ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002ec:	e7fe      	b.n	80002ec <ADC1_2_IRQHandler>
	...

080002f0 <__libc_init_array>:
 80002f0:	b570      	push	{r4, r5, r6, lr}
 80002f2:	4d0d      	ldr	r5, [pc, #52]	; (8000328 <__libc_init_array+0x38>)
 80002f4:	4c0d      	ldr	r4, [pc, #52]	; (800032c <__libc_init_array+0x3c>)
 80002f6:	1b64      	subs	r4, r4, r5
 80002f8:	10a4      	asrs	r4, r4, #2
 80002fa:	2600      	movs	r6, #0
 80002fc:	42a6      	cmp	r6, r4
 80002fe:	d109      	bne.n	8000314 <__libc_init_array+0x24>
 8000300:	4d0b      	ldr	r5, [pc, #44]	; (8000330 <__libc_init_array+0x40>)
 8000302:	4c0c      	ldr	r4, [pc, #48]	; (8000334 <__libc_init_array+0x44>)
 8000304:	f000 f818 	bl	8000338 <_init>
 8000308:	1b64      	subs	r4, r4, r5
 800030a:	10a4      	asrs	r4, r4, #2
 800030c:	2600      	movs	r6, #0
 800030e:	42a6      	cmp	r6, r4
 8000310:	d105      	bne.n	800031e <__libc_init_array+0x2e>
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	f855 3b04 	ldr.w	r3, [r5], #4
 8000318:	4798      	blx	r3
 800031a:	3601      	adds	r6, #1
 800031c:	e7ee      	b.n	80002fc <__libc_init_array+0xc>
 800031e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000322:	4798      	blx	r3
 8000324:	3601      	adds	r6, #1
 8000326:	e7f2      	b.n	800030e <__libc_init_array+0x1e>
 8000328:	08000350 	.word	0x08000350
 800032c:	08000350 	.word	0x08000350
 8000330:	08000350 	.word	0x08000350
 8000334:	08000354 	.word	0x08000354

08000338 <_init>:
 8000338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033a:	bf00      	nop
 800033c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033e:	bc08      	pop	{r3}
 8000340:	469e      	mov	lr, r3
 8000342:	4770      	bx	lr

08000344 <_fini>:
 8000344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000346:	bf00      	nop
 8000348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034a:	bc08      	pop	{r3}
 800034c:	469e      	mov	lr, r3
 800034e:	4770      	bx	lr

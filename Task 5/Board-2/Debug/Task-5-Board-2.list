
Task-5-Board-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000290  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000424  08000424  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000424  08000424  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08000424  08000424  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000424  08000424  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000424  08000424  00010424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000428  08000428  00010428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  0800042c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020040  2**0
                  CONTENTS
 10 .bss          0000001c  20000040  20000040  00020040  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000005c  2000005c  00020040  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_line   00000512  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000000dc  00000000  00000000  00020582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000087  00000000  00000000  0002065e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000068  00000000  00000000  000206e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00003b01  00000000  00000000  00020750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000030  00000000  00000000  00024258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00000f34  00000000  00000000  00024288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000251bc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  0002520c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000040 	.word	0x20000040
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800040c 	.word	0x0800040c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000044 	.word	0x20000044
 80001d0:	0800040c 	.word	0x0800040c

080001d4 <assembly_function>:

@ this is the entry function called from the c file
assembly_function:

@ run the functions to perform the config of the ports
	BL initialise_power
 80001d4:	f000 f87c 	bl	80002d0 <initialise_power>
	//BL change_clock_speed
	BL enable_peripheral_clocks
 80001d8:	f000 f849 	bl	800026e <enable_peripheral_clocks>
	BL enable_uarts
 80001dc:	f000 f84d 	bl	800027a <enable_uarts>
	BL initialise_discovery_board
 80001e0:	f000 f886 	bl	80002f0 <initialise_discovery_board>
	BL enable_timer2_clock
 80001e4:	f000 f87e 	bl	80002e4 <enable_timer2_clock>
	BL prescaler_values
 80001e8:	f000 f887 	bl	80002fa <prescaler_values>
	BL start_timer
 80001ec:	f000 f892 	bl	8000314 <start_timer>
	BL trigger_prescaler
 80001f0:	f000 f896 	bl	8000320 <trigger_prescaler>

	LDR R1, =0xFFFF
	STR R1, [R0, TIM_CCR1]*/

@ initialise the buffer and counter
	LDR R6, =incoming_buffer
 80001f4:	4e52      	ldr	r6, [pc, #328]	; (8000340 <trigger_prescaler+0x20>)
	LDR R7, =incoming_counter
 80001f6:	4f53      	ldr	r7, [pc, #332]	; (8000344 <trigger_prescaler+0x24>)
	LDRB R7, [R7]
 80001f8:	783f      	ldrb	r7, [r7, #0]
	MOV R8, #0x00
 80001fa:	f04f 0800 	mov.w	r8, #0

080001fe <loop_forever>:
	@B tx_uart5

@ continue reading forever (NOTE: eventually it will run out of memory as we don't have a big buffer
loop_forever:

	LDR R0, =UART4 @ the base address for the register to set up UART4
 80001fe:	4852      	ldr	r0, [pc, #328]	; (8000348 <trigger_prescaler+0x28>)
	LDR R1, [R0, USART_ISR] @ load the status of the UART4
 8000200:	69c1      	ldr	r1, [r0, #28]

	TST R1, 1 << UART_ORE | 1 << UART_FE  @ 'AND' the current status with the bit mask that we are interested in
 8000202:	f011 0f0a 	tst.w	r1, #10
						   @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	BNE clear_error
 8000206:	d113      	bne.n	8000230 <clear_error>

	TST R1, 1 << UART_RXNE @ 'AND' the current status with the bit mask that we are interested in
 8000208:	f011 0f20 	tst.w	r1, #32
							  @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	BEQ loop_forever @ loop back to check status again if the flag indicates there is no byte waiting
 800020c:	d0f7      	beq.n	80001fe <loop_forever>

	LDRB R3, [R0, USART_RDR] @ load the lowest byte (RDR bits [0:7] for an 8 bit read)
 800020e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
	//STRB R3, [R6, R8]
	//ADD R8, #1

	@ LED DISPLAY FROM BOARD 1
	LDR R0, =GPIOE  @ load the address of the GPIOE register into R0
 8000212:	484e      	ldr	r0, [pc, #312]	; (800034c <trigger_prescaler+0x2c>)
	STRB R3, [R0, #ODR + 1]   @ store this to the second byte of the ODR (bits 8-15)
 8000214:	7543      	strb	r3, [r0, #21]

	BL timer_func
 8000216:	f000 f810 	bl	800023a <timer_func>

	BL tx_uart5
 800021a:	f000 f820 	bl	800025e <tx_uart5>

	CMP R7, R8
 800021e:	4547      	cmp	r7, r8
	BGT no_reset
 8000220:	dc01      	bgt.n	8000226 <no_reset>
	MOV R8, #0
 8000222:	f04f 0800 	mov.w	r8, #0

08000226 <no_reset>:

no_reset:

	LDR R1, [R0, USART_RQR] @ load the status of the UART4
 8000226:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << UART_RXFRQ
 8000228:	f041 0108 	orr.w	r1, r1, #8
	STR R1, [R0, USART_RQR]
 800022c:	6181      	str	r1, [r0, #24]
	BGT loop_forever
 800022e:	dce6      	bgt.n	80001fe <loop_forever>

08000230 <clear_error>:


clear_error:

	LDR R1, [R0, USART_ICR] @ load the status of the UART4
 8000230:	6a01      	ldr	r1, [r0, #32]
	@ Clear the overrun/frame error flag (see page 897)
	ORR R1, 1 << UART_ORECF | 1 << UART_FECF
 8000232:	f041 0108 	orr.w	r1, r1, #8
	STR R1, [R0, USART_ICR] @ load the status of the UART4
 8000236:	6201      	str	r1, [r0, #32]

	B loop_forever
 8000238:	e7e1      	b.n	80001fe <loop_forever>

0800023a <timer_func>:


timer_func:

	LDR R0, =TIM2
 800023a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	LDR R5, [R0, TIM_SR]
 800023e:	6905      	ldr	r5, [r0, #16]
	LDR R5, =0b00000000 @Re Set the clock on a successful branch!
 8000240:	f04f 0500 	mov.w	r5, #0
	STRB R5, [R0, TIM_SR]
 8000244:	7405      	strb	r5, [r0, #16]
	STR R5, [R0, TIM_CNT]
 8000246:	6245      	str	r5, [r0, #36]	; 0x24
	LDR R5, [R0, TIM_SR]
 8000248:	6905      	ldr	r5, [r0, #16]
	B timer_2
 800024a:	e7ff      	b.n	800024c <timer_2>

0800024c <timer_2>:

timer_2:

	LDR R0, =TIM2  		@ load the address of the timer 2 base address
 800024c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	LDR R6, [R0, TIM_SR]
 8000250:	6906      	ldr	r6, [r0, #16]
	AND R6, R6, #1		//checking the value of the UIF port
 8000252:	f006 0601 	and.w	r6, r6, #1
	CMP R6, #1
 8000256:	2e01      	cmp	r6, #1
	BEQ timer_3_send
 8000258:	d000      	beq.n	800025c <timer_3_send>

	B timer_2
 800025a:	e7f7      	b.n	800024c <timer_2>

0800025c <timer_3_send>:

timer_3_send:
	BX LR
 800025c:	4770      	bx	lr

0800025e <tx_uart5>:



tx_uart5:

	LDR R0, =UART5
 800025e:	483c      	ldr	r0, [pc, #240]	; (8000350 <trigger_prescaler+0x30>)

	LDR R1, [R0, USART_ISR] @ load the status of the UART4
 8000260:	69c1      	ldr	r1, [r0, #28]
	ANDS R1, 1 << UART_TXE @ 'AND' the current status with the bit mask that we are interested in
 8000262:	f011 0180 	ands.w	r1, r1, #128	; 0x80
							  @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	BEQ tx_uart5 @ loop back to check status again if the flag indicates there is no byte waiting
 8000266:	d0fa      	beq.n	800025e <tx_uart5>

	//LDRB R5, [R3, #1]

	STRB R3, [R0, USART_TDR]
 8000268:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28


	BX LR
 800026c:	4770      	bx	lr

0800026e <enable_peripheral_clocks>:


@ function to enable the clocks for the peripherals we are using (A, C and E)
enable_peripheral_clocks:
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 800026e:	4839      	ldr	r0, [pc, #228]	; (8000354 <trigger_prescaler+0x34>)
	LDR R1, [R0, #AHBENR]  @ load the current value of the peripheral clock registers
 8000270:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << 21 | 1 << 19 | 1 << 17 | 1 << 20  @ 21st bit is enable GPIOE clock, 19 is GPIOC, 17 is GPIOA clock
 8000272:	f441 1168 	orr.w	r1, r1, #3801088	; 0x3a0000
	STR R1, [R0, #AHBENR]  @ store the modified register back to the submodule
 8000276:	6141      	str	r1, [r0, #20]
	BX LR @ return
 8000278:	4770      	bx	lr

0800027a <enable_uarts>:

@ function to enable the UART4 - this requires setting the alternate functions for the UART4 pins
@ BAUD rate needs to change depending on whether it is 8MHz (external clock) or 24MHz (our PLL setting)
enable_uarts:
	LDR R0, =GPIOC
 800027a:	4837      	ldr	r0, [pc, #220]	; (8000358 <trigger_prescaler+0x38>)
	LDR R1, =0x00055500	@ set the alternate function for the UART4 pins (PC10 and PC11) and uart5 pin PC12
 800027c:	4937      	ldr	r1, [pc, #220]	; (800035c <trigger_prescaler+0x3c>)
	STR R1, [R0, AFRH]
 800027e:	6241      	str	r1, [r0, #36]	; 0x24

	LDR R1, =0x02A00000 @ Mask for pins PC10, PC11, PC12 to use the alternate function
 8000280:	f04f 7128 	mov.w	r1, #44040192	; 0x2a00000
	STR R1, [R0, GPIO_MODER]
 8000284:	6001      	str	r1, [r0, #0]

	LDR R1, =0x03F00000 @ Set the speed for PC10, PC11 and PC12 to use high speed
 8000286:	f04f 717c 	mov.w	r1, #66060288	; 0x3f00000
	STR R1, [R0, GPIO_OSPEEDR]
 800028a:	6081      	str	r1, [r0, #8]

	LDR R0, =GPIOD
 800028c:	4834      	ldr	r0, [pc, #208]	; (8000360 <trigger_prescaler+0x40>)
	LDR R1, =0x00000500
 800028e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
	STR R1, [R0, AFRL]
 8000292:	6201      	str	r1, [r0, #32]

	LDR R1, =0x00000020
 8000294:	f04f 0120 	mov.w	r1, #32
	STR R1, [R0, GPIO_MODER]
 8000298:	6001      	str	r1, [r0, #0]

	LDR R1, =0x00000030 @ Set the speed for PC10, PC11 and PC12 to use high speed
 800029a:	f04f 0130 	mov.w	r1, #48	; 0x30
	STR R1, [R0, GPIO_OSPEEDR]
 800029e:	6081      	str	r1, [r0, #8]

	@ UART4EN is bit number 19, we need to turn the clock on for this
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 80002a0:	482c      	ldr	r0, [pc, #176]	; (8000354 <trigger_prescaler+0x34>)
	LDR R1, [R0, #APB1ENR] @ load the original value from the enable register
 80002a2:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << UART4EN | 1 << UART5EN @ apply the bit mask to the previous values of the enable UART4
 80002a4:	f441 11c0 	orr.w	r1, r1, #1572864	; 0x180000
	STR R1, [R0, #APB1ENR] @ store the modified enable register values back to RCC
 80002a8:	61c1      	str	r1, [r0, #28]

	@ this is the baud rate
	MOV R1, #0x46 @ from our earlier calculations (for 8MHz), store this in register R1
 80002aa:	f04f 0146 	mov.w	r1, #70	; 0x46
	LDR R0, =UART4 @ the base address for the register to turn clocks on/off
 80002ae:	4826      	ldr	r0, [pc, #152]	; (8000348 <trigger_prescaler+0x28>)
	STRH R1, [R0, #USART_BRR] @ store this value directly in the first half word (16 bits) of
 80002b0:	8181      	strh	r1, [r0, #12]
							  	 @ the baud rate register
	MOV R1, #0x46
 80002b2:	f04f 0146 	mov.w	r1, #70	; 0x46
	LDR R0, =UART5
 80002b6:	4826      	ldr	r0, [pc, #152]	; (8000350 <trigger_prescaler+0x30>)
	STRH R1, [R0, #USART_BRR]
 80002b8:	8181      	strh	r1, [r0, #12]

	@ we want to set a few things here, lets define their bit positions to make it more readable
	LDR R0, =UART4 @ the base address for the register to set up UART4
 80002ba:	4823      	ldr	r0, [pc, #140]	; (8000348 <trigger_prescaler+0x28>)
	LDR R1, [R0, #USART_CR1] @ load the original value from the enable register
 80002bc:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE @ make a bit mask with a '1' for the bits to enable,
 80002be:	f041 010d 	orr.w	r1, r1, #13
													   @ apply the bit mask to the previous values of the enable register
	STR R1, [R0, #USART_CR1] @ store the modified enable register values back to RCC
 80002c2:	6001      	str	r1, [r0, #0]

	LDR R0, =UART5
 80002c4:	4822      	ldr	r0, [pc, #136]	; (8000350 <trigger_prescaler+0x30>)
	LDR R1, [R0, #USART_CR1]
 80002c6:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE
 80002c8:	f041 010d 	orr.w	r1, r1, #13

	STR R1, [R0, #USART_CR1]
 80002cc:	6001      	str	r1, [r0, #0]

	BX LR @ return
 80002ce:	4770      	bx	lr

080002d0 <initialise_power>:
.equ PWREN, 28
.equ SYSCFGEN, 0
initialise_power:

	@ enable clock power
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 80002d0:	4820      	ldr	r0, [pc, #128]	; (8000354 <trigger_prescaler+0x34>)
	LDR R1, [R0, #APB1ENR] @ load the original value from the enable register
 80002d2:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << PWREN @ apply the bit mask for power enable
 80002d4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
	STR R1, [R0, #APB1ENR] @ store the modified enable register values back to RCC
 80002d8:	61c1      	str	r1, [r0, #28]

	@ enable clock config
	LDR R1, [R0, #APB2ENR] @ load the original value from the enable register
 80002da:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << SYSCFGEN @ apply the bit mask to allow clock configuration
 80002dc:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, #APB2ENR] @ store the modified enable register values back to RCC
 80002e0:	6181      	str	r1, [r0, #24]
	BX LR @ return
 80002e2:	4770      	bx	lr

080002e4 <enable_timer2_clock>:

enable_timer2_clock:

	LDR R0, =RCC	@ load the base address for the timer
 80002e4:	481b      	ldr	r0, [pc, #108]	; (8000354 <trigger_prescaler+0x34>)
	LDR R1, [R0, APB1ENR] 	@ load the peripheral clock control register
 80002e6:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << TIM2EN @ store a 1 in bit for the TIM2 enable flag
 80002e8:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, APB1ENR] @ enable the timer
 80002ec:	61c1      	str	r1, [r0, #28]
	BX LR @ return
 80002ee:	4770      	bx	lr

080002f0 <initialise_discovery_board>:

initialise_discovery_board:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80002f0:	4816      	ldr	r0, [pc, #88]	; (800034c <trigger_prescaler+0x2c>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 80002f2:	f245 5155 	movw	r1, #21845	; 0x5555
					 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
 80002f6:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15
	BX LR @ return from function call
 80002f8:	4770      	bx	lr

080002fa <prescaler_values>:

prescaler_values:

	LDR R4, =delay_time
 80002fa:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	LDR R1, =reload_value
 80002fe:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	LDR R0, =8000
 8000302:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
	MUL R4, R4, R0		//multiplying the total time by the frequency
 8000306:	fb04 f400 	mul.w	r4, r4, r0
	SDIV R4, R4, R1 	//dividing the number of beats by the count value
 800030a:	fb94 f4f1 	sdiv	r4, r4, r1
	SUB R4, R4, #1		//subtracting one to get the prescaler value
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
	BX LR
 8000312:	4770      	bx	lr

08000314 <start_timer>:

start_timer:

	LDR R0, =TIM2		@ load the base address for the timer
 8000314:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	MOV R1, #0b01000001
 8000318:	f04f 0141 	mov.w	r1, #65	; 0x41
	STR R1, [R0, TIM_CR1]	@ enable the timer (bit 0) and ARPE (bit 7)
 800031c:	6001      	str	r1, [r0, #0]
	BX LR
 800031e:	4770      	bx	lr

08000320 <trigger_prescaler>:

trigger_prescaler:

	LDR R0, =TIM2
 8000320:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	STR R4, [R0, TIM_PSC] 	//storing value of prescaler
 8000324:	6284      	str	r4, [r0, #40]	; 0x28
	LDR R1, =0x1
 8000326:	f04f 0101 	mov.w	r1, #1
	STR R1, [R0, TIM_ARR]	//initialise prescaler by overflowing ARR
 800032a:	62c1      	str	r1, [r0, #44]	; 0x2c
	LDR R8, =0x00
 800032c:	f04f 0800 	mov.w	r8, #0
	STR R8, [R0, TIM_CNT] 	//setting clock to zero
 8000330:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
	LDR R1, =reload_value
 8000334:	f44f 2180 	mov.w	r1, #262144	; 0x40000
	STR R1, [R0, TIM_ARR] 	//setting ARR to our desired value
 8000338:	62c1      	str	r1, [r0, #44]	; 0x2c
	STR R8, [R0, TIM_CNT]
 800033a:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
	BX LR
 800033e:	4770      	bx	lr
	LDR R6, =incoming_buffer
 8000340:	20000000 	.word	0x20000000
	LDR R7, =incoming_counter
 8000344:	2000003e 	.word	0x2000003e
	LDR R0, =UART4 @ the base address for the register to set up UART4
 8000348:	40004c00 	.word	0x40004c00
	LDR R0, =GPIOE  @ load the address of the GPIOE register into R0
 800034c:	48001000 	.word	0x48001000
	LDR R0, =UART5
 8000350:	40005000 	.word	0x40005000
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 8000354:	40021000 	.word	0x40021000
	LDR R0, =GPIOC
 8000358:	48000800 	.word	0x48000800
	LDR R1, =0x00055500	@ set the alternate function for the UART4 pins (PC10 and PC11) and uart5 pin PC12
 800035c:	00055500 	.word	0x00055500
	LDR R0, =GPIOD
 8000360:	48000c00 	.word	0x48000c00

08000364 <main>:
#endif

extern void assembly_function();

int main(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	assembly_function();
 8000368:	f7ff ff34 	bl	80001d4 <assembly_function>
    /* Loop forever */
	for(;;);
 800036c:	e7fe      	b.n	800036c <main+0x8>
	...

08000370 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000370:	480d      	ldr	r0, [pc, #52]	; (80003a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000372:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000374:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000378:	480c      	ldr	r0, [pc, #48]	; (80003ac <LoopForever+0x6>)
  ldr r1, =_edata
 800037a:	490d      	ldr	r1, [pc, #52]	; (80003b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800037c:	4a0d      	ldr	r2, [pc, #52]	; (80003b4 <LoopForever+0xe>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000380:	e002      	b.n	8000388 <LoopCopyDataInit>

08000382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000386:	3304      	adds	r3, #4

08000388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800038c:	d3f9      	bcc.n	8000382 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038e:	4a0a      	ldr	r2, [pc, #40]	; (80003b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000390:	4c0a      	ldr	r4, [pc, #40]	; (80003bc <LoopForever+0x16>)
  movs r3, #0
 8000392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000394:	e001      	b.n	800039a <LoopFillZerobss>

08000396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000398:	3204      	adds	r2, #4

0800039a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800039c:	d3fb      	bcc.n	8000396 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800039e:	f000 f811 	bl	80003c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003a2:	f7ff ffdf 	bl	8000364 <main>

080003a6 <LoopForever>:

LoopForever:
  b LoopForever
 80003a6:	e7fe      	b.n	80003a6 <LoopForever>
  ldr   r0, =_estack
 80003a8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80003ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b0:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80003b4:	0800042c 	.word	0x0800042c
  ldr r2, =_sbss
 80003b8:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80003bc:	2000005c 	.word	0x2000005c

080003c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c0:	e7fe      	b.n	80003c0 <ADC1_2_IRQHandler>
	...

080003c4 <__libc_init_array>:
 80003c4:	b570      	push	{r4, r5, r6, lr}
 80003c6:	4d0d      	ldr	r5, [pc, #52]	; (80003fc <__libc_init_array+0x38>)
 80003c8:	4c0d      	ldr	r4, [pc, #52]	; (8000400 <__libc_init_array+0x3c>)
 80003ca:	1b64      	subs	r4, r4, r5
 80003cc:	10a4      	asrs	r4, r4, #2
 80003ce:	2600      	movs	r6, #0
 80003d0:	42a6      	cmp	r6, r4
 80003d2:	d109      	bne.n	80003e8 <__libc_init_array+0x24>
 80003d4:	4d0b      	ldr	r5, [pc, #44]	; (8000404 <__libc_init_array+0x40>)
 80003d6:	4c0c      	ldr	r4, [pc, #48]	; (8000408 <__libc_init_array+0x44>)
 80003d8:	f000 f818 	bl	800040c <_init>
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	10a4      	asrs	r4, r4, #2
 80003e0:	2600      	movs	r6, #0
 80003e2:	42a6      	cmp	r6, r4
 80003e4:	d105      	bne.n	80003f2 <__libc_init_array+0x2e>
 80003e6:	bd70      	pop	{r4, r5, r6, pc}
 80003e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ec:	4798      	blx	r3
 80003ee:	3601      	adds	r6, #1
 80003f0:	e7ee      	b.n	80003d0 <__libc_init_array+0xc>
 80003f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f6:	4798      	blx	r3
 80003f8:	3601      	adds	r6, #1
 80003fa:	e7f2      	b.n	80003e2 <__libc_init_array+0x1e>
 80003fc:	08000424 	.word	0x08000424
 8000400:	08000424 	.word	0x08000424
 8000404:	08000424 	.word	0x08000424
 8000408:	08000428 	.word	0x08000428

0800040c <_init>:
 800040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040e:	bf00      	nop
 8000410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000412:	bc08      	pop	{r3}
 8000414:	469e      	mov	lr, r3
 8000416:	4770      	bx	lr

08000418 <_fini>:
 8000418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041a:	bf00      	nop
 800041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041e:	bc08      	pop	{r3}
 8000420:	469e      	mov	lr, r3
 8000422:	4770      	bx	lr

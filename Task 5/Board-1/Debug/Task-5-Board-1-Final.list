
Task-5-Board-1-Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000268  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003fc  080003fc  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003fc  080003fc  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  080003fc  080003fc  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003fc  080003fc  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003fc  080003fc  000103fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000400  08000400  00010400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08000404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020050  2**0
                  CONTENTS
 10 .bss          0000001c  20000050  20000050  00020050  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000006c  2000006c  00020050  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .debug_line   00000502  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000000dc  00000000  00000000  00020582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000087  00000000  00000000  0002065e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000068  00000000  00000000  000206e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00003b07  00000000  00000000  00020750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000030  00000000  00000000  00024258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00000f34  00000000  00000000  00024288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000251bc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  0002520c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000050 	.word	0x20000050
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003e4 	.word	0x080003e4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000054 	.word	0x20000054
 80001d0:	080003e4 	.word	0x080003e4

080001d4 <assembly_function>:
@Define code

assembly_function:

@ run the functions to perform the config of the ports
	BL initialise_power
 80001d4:	f000 f86f 	bl	80002b6 <initialise_power>
	@BL change_clock_speed
	BL enable_peripheral_clocks
 80001d8:	f000 f891 	bl	80002fe <enable_peripheral_clocks>
	BL enable_uart4
 80001dc:	f000 f875 	bl	80002ca <enable_uart4>
	BL initialise_discovery_board
 80001e0:	f000 f893 	bl	800030a <initialise_discovery_board>

@ initialise the buffer and counter
	LDR R6, =incoming_buffer
 80001e4:	4e4c      	ldr	r6, [pc, #304]	; (8000318 <initialise_discovery_board+0xe>)
	LDR R7, =incoming_counter
 80001e6:	4f4d      	ldr	r7, [pc, #308]	; (800031c <initialise_discovery_board+0x12>)
	LDRB R7, [R7]
 80001e8:	783f      	ldrb	r7, [r7, #0]
	MOV R8, #0x00
 80001ea:	f04f 0800 	mov.w	r8, #0


	@ uncomment the next line to enter a transmission loop
	B tx_loop
 80001ee:	e7ff      	b.n	80001f0 <tx_loop>

080001f0 <tx_loop>:


tx_loop:
	MOV R6, #0x0						@Offset for each letter
 80001f0:	f04f 0600 	mov.w	r6, #0

	LDR R3, =tx_string
 80001f4:	4b4a      	ldr	r3, [pc, #296]	; (8000320 <initialise_discovery_board+0x16>)
	LDR R4, =tx_length
 80001f6:	4c4b      	ldr	r4, [pc, #300]	; (8000324 <initialise_discovery_board+0x1a>)

080001f8 <tx_uart>:


tx_uart:

	LDR R1, [R0, USART_ISR] 	@ load the status of the UART4
 80001f8:	69c1      	ldr	r1, [r0, #28]
	ANDS R1, 1 << UART_TXE 		@ 'AND' the current status with the bit mask that we are interested in
 80001fa:	f011 0180 	ands.w	r1, r1, #128	; 0x80
								@ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	BEQ tx_uart 				@ loop back to check status again if the flag indicates there is no byte waiting
 80001fe:	d0fb      	beq.n	80001f8 <tx_uart>

	LDRB R5, [R3, R6]			@ Load the first letter
 8000200:	5d9d      	ldrb	r5, [r3, r6]

	LDR R9, =GPIOE  @ load the address of the GPIOE register into R0
 8000202:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8000328 <initialise_discovery_board+0x1e>
	STRB R5, [R9, #ODR + 1]   @ store this to the second byte of the ODR (bits 8-15)
 8000206:	f889 5015 	strb.w	r5, [r9, #21]

	BL wait_for_button
 800020a:	f000 f805 	bl	8000218 <wait_for_button>

	STRB R5, [R0, USART_TDR]	@Transmit the first letter
 800020e:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28



	ADD R6, R6, #0x1			@Move to next letter
 8000212:	f106 0601 	add.w	r6, r6, #1



	B tx_uart
 8000216:	e7ef      	b.n	80001f8 <tx_uart>

08000218 <wait_for_button>:


wait_for_button:

	LDR R1, =GPIOA
 8000218:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000

	LDRB R2, [R1, #IDR]
 800021c:	7c0a      	ldrb	r2, [r1, #16]

	TST R2, #0x01
 800021e:	f012 0f01 	tst.w	r2, #1

	BNE delay_loop
 8000222:	d100      	bne.n	8000226 <delay_loop>

	B wait_for_button
 8000224:	e7f8      	b.n	8000218 <wait_for_button>

08000226 <delay_loop>:

delay_loop:
	LDR R9, =0x900FF
 8000226:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800032c <initialise_discovery_board+0x22>

0800022a <delay_inner>:

delay_inner:

	SUBS R9, #1
 800022a:	f1b9 0901 	subs.w	r9, r9, #1
	BGT delay_inner
 800022e:	dcfc      	bgt.n	800022a <delay_inner>
	BX LR
 8000230:	4770      	bx	lr

08000232 <loop_forever>:
	//B tx_uart @ return from function call

@ continue reading forever (NOTE: eventually it will run out of memory as we don't have a big buffer
loop_forever:

	LDR R0, =UART4 @ the base address for the register to set up UART4
 8000232:	483f      	ldr	r0, [pc, #252]	; (8000330 <initialise_discovery_board+0x26>)
	LDR R1, [R0, USART_ISR] @ load the status of the UART4
 8000234:	69c1      	ldr	r1, [r0, #28]

	TST R1, 1 << UART_ORE | 1 << UART_FE  @ 'AND' the current status with the bit mask that we are interested in
 8000236:	f011 0f0a 	tst.w	r1, #10
						   @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	BNE clear_error
 800023a:	d111      	bne.n	8000260 <clear_error>

	TST R1, 1 << UART_RXNE @ 'AND' the current status with the bit mask that we are interested in
 800023c:	f011 0f20 	tst.w	r1, #32
							  @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	BEQ loop_forever @ loop back to check status again if the flag indicates there is no byte waiting
 8000240:	d0f7      	beq.n	8000232 <loop_forever>

	LDRB R3, [R0, USART_RDR] @ load the lowest byte (RDR bits [0:7] for an 8 bit read)
 8000242:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
	STRB R3, [R6, R8]
 8000246:	f806 3008 	strb.w	r3, [r6, r8]
	ADD R8, #1
 800024a:	f108 0801 	add.w	r8, r8, #1

	CMP R7, R8
 800024e:	4547      	cmp	r7, r8
	BGT no_reset
 8000250:	dc01      	bgt.n	8000256 <no_reset>
	MOV R8, #0
 8000252:	f04f 0800 	mov.w	r8, #0

08000256 <no_reset>:

no_reset:

	LDR R1, [R0, USART_RQR] @ load the status of the UART4
 8000256:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << UART_RXFRQ
 8000258:	f041 0108 	orr.w	r1, r1, #8
	STR R1, [R0, USART_RQR]
 800025c:	6181      	str	r1, [r0, #24]

	BGT loop_forever
 800025e:	dce8      	bgt.n	8000232 <loop_forever>

08000260 <clear_error>:


clear_error:

	LDR R1, [R0, USART_ICR] @ load the status of the UART4
 8000260:	6a01      	ldr	r1, [r0, #32]
	@ Clear the overrun/frame error flag (see page 897)
	ORR R1, 1 << UART_ORECF | 1 << UART_FECF
 8000262:	f041 0108 	orr.w	r1, r1, #8
	STR R1, [R0, USART_ICR] @ load the status of the UART4
 8000266:	6201      	str	r1, [r0, #32]
	B loop_forever
 8000268:	e7e3      	b.n	8000232 <loop_forever>

0800026a <change_clock_speed>:

@ set the PLL (clocks are described in page 125 of the large manual)
change_clock_speed:
@ step 1, set clock to HSE (the external clock)
	@ enable HSE (and wait for complete)
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 800026a:	4832      	ldr	r0, [pc, #200]	; (8000334 <initialise_discovery_board+0x2a>)
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 800026c:	6801      	ldr	r1, [r0, #0]
	LDR R2, =1 << HSEBYP | 1 << HSEON @ make a bit mask with a '1' in the 0th bit position
 800026e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
	ORR R1, R2 @ apply the bit mask to the previous values of the enable register
 8000272:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #RCC_CR] @ store the modified enable register values back to RCC
 8000276:	6001      	str	r1, [r0, #0]

08000278 <wait_for_HSERDY>:

wait_for_HSERDY:
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 8000278:	6801      	ldr	r1, [r0, #0]
	TST R1, 1 << HSERDY @ Test the HSERDY bit (check if it is 1)
 800027a:	f411 3f00 	tst.w	r1, #131072	; 0x20000
	BEQ wait_for_HSERDY
 800027e:	d0fb      	beq.n	8000278 <wait_for_HSERDY>

@ step 2, now the clock is HSE, we are allowed to switch to PLL
	@ clock is set to External clock (external crystal) - 8MHz, can enable the PLL now
	LDR R1, [R0, #RCC_CFGR] @ load the original value from the enable register
 8000280:	6841      	ldr	r1, [r0, #4]
	LDR R2, =1 << 20 | 1 << PLLSRC
 8000282:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
	ORR R1, R2  @ set PLLSRC (use PLL) and PLLMUL to 0100 - bit 20 is 1 (set speed as 6x faster)
 8000286:	ea41 0102 	orr.w	r1, r1, r2
				@ see page 140 of the large manual for options
				@ NOTE: cannot go faster than 72MHz)
	STR R1, [R0, #RCC_CFGR] @ store the modified enable register values back to RCC
 800028a:	6041      	str	r1, [r0, #4]

	@ enable PLL (and wait for complete)
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 800028c:	4829      	ldr	r0, [pc, #164]	; (8000334 <initialise_discovery_board+0x2a>)
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 800028e:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << PLLON @ apply the bit mask to turn on the PLL
 8000290:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
	STR R1, [R0, #RCC_CR] @ store the modified enable register values back to RCC
 8000294:	6001      	str	r1, [r0, #0]

08000296 <wait_for_PLLRDY>:

wait_for_PLLRDY:
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 8000296:	6801      	ldr	r1, [r0, #0]
	TST R1, 1 << PLLRDY @ Test the HSERDY bit (check if it is 1)
 8000298:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
	BEQ wait_for_PLLRDY
 800029c:	d0fb      	beq.n	8000296 <wait_for_PLLRDY>

@ step 3, PLL is ready, switch over the system clock to PLL
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 800029e:	4825      	ldr	r0, [pc, #148]	; (8000334 <initialise_discovery_board+0x2a>)
	LDR R1, [R0, #RCC_CFGR]  @ load the current value of the peripheral clock registers
 80002a0:	6841      	ldr	r1, [r0, #4]
	MOV R2, 1 << 10 | 1 << 1  @ some more settings - bit 1 (SW = 10)  - PLL set as system clock
 80002a2:	f240 4202 	movw	r2, #1026	; 0x402
									   @ bit 10 (HCLK=100) divided by 2 (clock is faster, need to prescale for peripherals)
	ORR R1, R2	@ Set the values of these two clocks (turn them on)
 80002a6:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #RCC_CFGR]  @ store the modified register back to the submodule
 80002aa:	6041      	str	r1, [r0, #4]

	LDR R1, [R0, #RCC_CFGR]  @ load the current value of the peripheral clock registers
 80002ac:	6841      	ldr	r1, [r0, #4]
	ORR R1, 1 << USBPRE	@ Set the USB prescaler (when PLL is on for the USB)
 80002ae:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
	STR R1, [R0, #RCC_CFGR]  @ store the modified register back to the submodule
 80002b2:	6041      	str	r1, [r0, #4]

	BX LR @ return
 80002b4:	4770      	bx	lr

080002b6 <initialise_power>:
.equ PWREN, 28
.equ SYSCFGEN, 0
initialise_power:

	@ enable clock power
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 80002b6:	481f      	ldr	r0, [pc, #124]	; (8000334 <initialise_discovery_board+0x2a>)
	LDR R1, [R0, #APB1ENR] @ load the original value from the enable register
 80002b8:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << PWREN @ apply the bit mask for power enable
 80002ba:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
	STR R1, [R0, #APB1ENR] @ store the modified enable register values back to RCC
 80002be:	61c1      	str	r1, [r0, #28]

	@ enable clock config
	LDR R1, [R0, #APB2ENR] @ load the original value from the enable register
 80002c0:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << SYSCFGEN @ apply the bit mask to allow clock configuration
 80002c2:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, #APB2ENR] @ store the modified enable register values back to RCC
 80002c6:	6181      	str	r1, [r0, #24]
	BX LR @ return
 80002c8:	4770      	bx	lr

080002ca <enable_uart4>:


@ function to enable the UART4 - this requires setting the alternate functions for the UART4 pins
@ BAUD rate needs to change depending on whether it is 8MHz (external clock) or 24MHz (our PLL setting)
enable_uart4:
	LDR R0, =GPIOC
 80002ca:	481b      	ldr	r0, [pc, #108]	; (8000338 <initialise_discovery_board+0x2e>)
	MOV R1, 0x55	@ set the alternate function for the UART4 pins (PC10 and PC11)
 80002cc:	f04f 0155 	mov.w	r1, #85	; 0x55
	STRB R1, [R0, AFRH + 1]
 80002d0:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25

	LDR R1, =0x00A00000 @ Mask for pins PC10 and PC11 to use the alternate function
 80002d4:	f44f 0120 	mov.w	r1, #10485760	; 0xa00000
	STR R1, [R0, GPIO_MODER]
 80002d8:	6001      	str	r1, [r0, #0]

	LDR R1, =0x00F00000 @ Set the speed for PC10 and PC11 to use high speed
 80002da:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
	STR R1, [R0, GPIO_OSPEEDR]
 80002de:	6081      	str	r1, [r0, #8]

	@ UART4EN is bit number 19, we need to turn the clock on for this
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 80002e0:	4814      	ldr	r0, [pc, #80]	; (8000334 <initialise_discovery_board+0x2a>)
	LDR R1, [R0, #APB1ENR] @ load the original value from the enable register
 80002e2:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << UART4EN  @ apply the bit mask to the previous values of the enable UART4
 80002e4:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
	STR R1, [R0, #APB1ENR] @ store the modified enable register values back to RCC
 80002e8:	61c1      	str	r1, [r0, #28]

	@ this is the baud rate
@	MOV R1, #0xD0 @ from our earlier calculations (for 24MHz), store this in register R1
	MOV R1, #0x46 @ from our earlier calculations (for 8MHz), store this in register R1
 80002ea:	f04f 0146 	mov.w	r1, #70	; 0x46
	LDR R0, =UART4 @ the base address for the register to turn clocks on/off
 80002ee:	4810      	ldr	r0, [pc, #64]	; (8000330 <initialise_discovery_board+0x26>)
	STRH R1, [R0, #USART_BRR] @ store this value directly in the first half word (16 bits) of
 80002f0:	8181      	strh	r1, [r0, #12]
							  	 @ the baud rate register

	@ we want to set a few things here, lets define their bit positions to make it more readable
	LDR R0, =UART4 @ the base address for the register to set up UART4
 80002f2:	480f      	ldr	r0, [pc, #60]	; (8000330 <initialise_discovery_board+0x26>)
	LDR R1, [R0, #USART_CR1] @ load the original value from the enable register
 80002f4:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE @ make a bit mask with a '1' for the bits to enable,
 80002f6:	f041 010d 	orr.w	r1, r1, #13
													   @ apply the bit mask to the previous values of the enable register

	STR R1, [R0, #USART_CR1] @ store the modified enable register values back to RCC
 80002fa:	6001      	str	r1, [r0, #0]

	BX LR @ return
 80002fc:	4770      	bx	lr

080002fe <enable_peripheral_clocks>:

	@ function to enable the clocks for the peripherals we are using (A, C and E)
enable_peripheral_clocks:
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 80002fe:	480d      	ldr	r0, [pc, #52]	; (8000334 <initialise_discovery_board+0x2a>)
	LDR R1, [R0, #AHBENR]  @ load the current value of the peripheral clock registers
 8000300:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << 21 | 1 << 19 | 1 << 17  @ 21st bit is enable GPIOE clock, 19 is GPIOC, 17 is GPIOA clock
 8000302:	f441 1128 	orr.w	r1, r1, #2752512	; 0x2a0000
	STR R1, [R0, #AHBENR]  @ store the modified register back to the submodule
 8000306:	6141      	str	r1, [r0, #20]
	BX LR @ return
 8000308:	4770      	bx	lr

0800030a <initialise_discovery_board>:


@ initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R10, =GPIOE 					@ load the address of the GPIOE register into R0
 800030a:	f8df a01c 	ldr.w	sl, [pc, #28]	; 8000328 <initialise_discovery_board+0x1e>
	LDR R11, =0x5555  					@ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 800030e:	f245 5b55 	movw	fp, #21845	; 0x5555

	STRH R11, [R10, #MODER + 2]   		@ store the new register values in the top half word representing
 8000312:	f8aa b002 	strh.w	fp, [sl, #2]
										@ the MODER settings for pe8-15
	BX LR 								@ return from function call
 8000316:	4770      	bx	lr
	LDR R6, =incoming_buffer
 8000318:	20000000 	.word	0x20000000
	LDR R7, =incoming_counter
 800031c:	2000003e 	.word	0x2000003e
	LDR R3, =tx_string
 8000320:	2000003f 	.word	0x2000003f
	LDR R4, =tx_length
 8000324:	2000004d 	.word	0x2000004d
	LDR R9, =GPIOE  @ load the address of the GPIOE register into R0
 8000328:	48001000 	.word	0x48001000
	LDR R9, =0x900FF
 800032c:	000900ff 	.word	0x000900ff
	LDR R0, =UART4 @ the base address for the register to set up UART4
 8000330:	40004c00 	.word	0x40004c00
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000334:	40021000 	.word	0x40021000
	LDR R0, =GPIOC
 8000338:	48000800 	.word	0x48000800

0800033c <main>:
#endif

extern void assembly_function();

int main(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	assembly_function();
 8000340:	f7ff ff48 	bl	80001d4 <assembly_function>
    /* Loop forever */
	for(;;);
 8000344:	e7fe      	b.n	8000344 <main+0x8>
	...

08000348 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000348:	480d      	ldr	r0, [pc, #52]	; (8000380 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800034a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800034c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000350:	480c      	ldr	r0, [pc, #48]	; (8000384 <LoopForever+0x6>)
  ldr r1, =_edata
 8000352:	490d      	ldr	r1, [pc, #52]	; (8000388 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000354:	4a0d      	ldr	r2, [pc, #52]	; (800038c <LoopForever+0xe>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000358:	e002      	b.n	8000360 <LoopCopyDataInit>

0800035a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800035c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035e:	3304      	adds	r3, #4

08000360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000364:	d3f9      	bcc.n	800035a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000366:	4a0a      	ldr	r2, [pc, #40]	; (8000390 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000368:	4c0a      	ldr	r4, [pc, #40]	; (8000394 <LoopForever+0x16>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800036c:	e001      	b.n	8000372 <LoopFillZerobss>

0800036e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000370:	3204      	adds	r2, #4

08000372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000374:	d3fb      	bcc.n	800036e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000376:	f000 f811 	bl	800039c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800037a:	f7ff ffdf 	bl	800033c <main>

0800037e <LoopForever>:

LoopForever:
  b LoopForever
 800037e:	e7fe      	b.n	800037e <LoopForever>
  ldr   r0, =_estack
 8000380:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000388:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 800038c:	08000404 	.word	0x08000404
  ldr r2, =_sbss
 8000390:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000394:	2000006c 	.word	0x2000006c

08000398 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000398:	e7fe      	b.n	8000398 <ADC1_2_IRQHandler>
	...

0800039c <__libc_init_array>:
 800039c:	b570      	push	{r4, r5, r6, lr}
 800039e:	4d0d      	ldr	r5, [pc, #52]	; (80003d4 <__libc_init_array+0x38>)
 80003a0:	4c0d      	ldr	r4, [pc, #52]	; (80003d8 <__libc_init_array+0x3c>)
 80003a2:	1b64      	subs	r4, r4, r5
 80003a4:	10a4      	asrs	r4, r4, #2
 80003a6:	2600      	movs	r6, #0
 80003a8:	42a6      	cmp	r6, r4
 80003aa:	d109      	bne.n	80003c0 <__libc_init_array+0x24>
 80003ac:	4d0b      	ldr	r5, [pc, #44]	; (80003dc <__libc_init_array+0x40>)
 80003ae:	4c0c      	ldr	r4, [pc, #48]	; (80003e0 <__libc_init_array+0x44>)
 80003b0:	f000 f818 	bl	80003e4 <_init>
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	10a4      	asrs	r4, r4, #2
 80003b8:	2600      	movs	r6, #0
 80003ba:	42a6      	cmp	r6, r4
 80003bc:	d105      	bne.n	80003ca <__libc_init_array+0x2e>
 80003be:	bd70      	pop	{r4, r5, r6, pc}
 80003c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c4:	4798      	blx	r3
 80003c6:	3601      	adds	r6, #1
 80003c8:	e7ee      	b.n	80003a8 <__libc_init_array+0xc>
 80003ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ce:	4798      	blx	r3
 80003d0:	3601      	adds	r6, #1
 80003d2:	e7f2      	b.n	80003ba <__libc_init_array+0x1e>
 80003d4:	080003fc 	.word	0x080003fc
 80003d8:	080003fc 	.word	0x080003fc
 80003dc:	080003fc 	.word	0x080003fc
 80003e0:	08000400 	.word	0x08000400

080003e4 <_init>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	bf00      	nop
 80003e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ea:	bc08      	pop	{r3}
 80003ec:	469e      	mov	lr, r3
 80003ee:	4770      	bx	lr

080003f0 <_fini>:
 80003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f2:	bf00      	nop
 80003f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f6:	bc08      	pop	{r3}
 80003f8:	469e      	mov	lr, r3
 80003fa:	4770      	bx	lr

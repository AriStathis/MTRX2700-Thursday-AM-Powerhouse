
Task-5-Board-3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000388  08000388  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000388  08000388  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08000388  08000388  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000388  08000388  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000388  08000388  00010388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800038c  0800038c  0001038c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08000390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020040  2**0
                  CONTENTS
 10 .bss          0000001c  20000040  20000040  00020040  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000005c  2000005c  00020040  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_line   000004da  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000000dc  00000000  00000000  0002054a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000087  00000000  00000000  00020626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000068  00000000  00000000  000206b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00003b01  00000000  00000000  00020718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000030  00000000  00000000  00024220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00000f34  00000000  00000000  00024250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00025184  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000058  00000000  00000000  000251d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000040 	.word	0x20000040
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000370 	.word	0x08000370

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000044 	.word	0x20000044
 80001d0:	08000370 	.word	0x08000370

080001d4 <assembly_function>:

@ this is the entry function called from the c file
assembly_function:

@ run the functions to perform the config of the ports
	BL initialise_power
 80001d4:	f000 f856 	bl	8000284 <initialise_power>
	BL enable_peripheral_clocks
 80001d8:	f000 f823 	bl	8000222 <enable_peripheral_clocks>
	BL enable_uarts
 80001dc:	f000 f827 	bl	800022e <enable_uarts>
	BL initialise_discovery_board
 80001e0:	f000 f85a 	bl	8000298 <initialise_discovery_board>

@ initialise the buffer and counter
	LDR R6, =incoming_buffer
 80001e4:	4e2f      	ldr	r6, [pc, #188]	; (80002a4 <initialise_discovery_board+0xc>)
	LDR R7, =incoming_counter
 80001e6:	4f30      	ldr	r7, [pc, #192]	; (80002a8 <initialise_discovery_board+0x10>)
	LDRB R7, [R7]
 80001e8:	783f      	ldrb	r7, [r7, #0]
	MOV R8, #0x00
 80001ea:	f04f 0800 	mov.w	r8, #0

080001ee <loop_forever>:


@ continue reading forever (NOTE: eventually it will run out of memory as we don't have a big buffer
loop_forever:

	LDR R0, =UART5 @ the base address for the register to set up UART4
 80001ee:	482f      	ldr	r0, [pc, #188]	; (80002ac <initialise_discovery_board+0x14>)
	LDR R1, [R0, USART_ISR] @ load the status of the UART4
 80001f0:	69c1      	ldr	r1, [r0, #28]

	TST R1, 1 << UART_ORE | 1 << UART_FE  @ 'AND' the current status with the bit mask that we are interested in
 80001f2:	f011 0f0a 	tst.w	r1, #10
						   @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	BNE clear_error
 80001f6:	d10f      	bne.n	8000218 <clear_error>

	TST R1, 1 << UART_RXNE @ 'AND' the current status with the bit mask that we are interested in
 80001f8:	f011 0f20 	tst.w	r1, #32
							  @ NOTE, the ANDS is used so that if the result is '0' the z register flag is set

	BEQ loop_forever @ loop back to check status again if the flag indicates there is no byte waiting
 80001fc:	d0f7      	beq.n	80001ee <loop_forever>

	LDRB R3, [R0, USART_RDR] @ load the lowest byte (RDR bits [0:7] for an 8 bit read)
 80001fe:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24


	LDR R0, =GPIOE  					@ load the address of the GPIOE register into R0
 8000202:	482b      	ldr	r0, [pc, #172]	; (80002b0 <initialise_discovery_board+0x18>)
	STRB R3, [R0, #ODR + 1]   			@ store this to the second byte of the ODR (bits 8-15)
 8000204:	7543      	strb	r3, [r0, #21]


	CMP R7, R8
 8000206:	4547      	cmp	r7, r8
	BGT no_reset
 8000208:	dc01      	bgt.n	800020e <no_reset>
	MOV R8, #0
 800020a:	f04f 0800 	mov.w	r8, #0

0800020e <no_reset>:



no_reset:

	LDR R1, [R0, USART_RQR] @ load the status of the UART4
 800020e:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << UART_RXFRQ
 8000210:	f041 0108 	orr.w	r1, r1, #8
	STR R1, [R0, USART_RQR]
 8000214:	6181      	str	r1, [r0, #24]
	BGT loop_forever
 8000216:	dcea      	bgt.n	80001ee <loop_forever>

08000218 <clear_error>:


clear_error:

	LDR R1, [R0, USART_ICR] @ load the status of the UART4
 8000218:	6a01      	ldr	r1, [r0, #32]
	@ Clear the overrun/frame error flag (see page 897)
	ORR R1, 1 << UART_ORECF | 1 << UART_FECF
 800021a:	f041 0108 	orr.w	r1, r1, #8
	STR R1, [R0, USART_ICR] @ load the status of the UART4
 800021e:	6201      	str	r1, [r0, #32]

	B loop_forever
 8000220:	e7e5      	b.n	80001ee <loop_forever>

08000222 <enable_peripheral_clocks>:



@ function to enable the clocks for the peripherals we are using (A, C and E)
enable_peripheral_clocks:
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 8000222:	4824      	ldr	r0, [pc, #144]	; (80002b4 <initialise_discovery_board+0x1c>)
	LDR R1, [R0, #AHBENR]  @ load the current value of the peripheral clock registers
 8000224:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << 21 | 1 << 19 | 1 << 17 | 1 << 20  @ 21st bit is enable GPIOE clock, 19 is GPIOC, 17 is GPIOA clock
 8000226:	f441 1168 	orr.w	r1, r1, #3801088	; 0x3a0000
	STR R1, [R0, #AHBENR]  @ store the modified register back to the submodule
 800022a:	6141      	str	r1, [r0, #20]
	BX LR @ return
 800022c:	4770      	bx	lr

0800022e <enable_uarts>:

@ function to enable the UART4 - this requires setting the alternate functions for the UART4 pins
@ BAUD rate needs to change depending on whether it is 8MHz (external clock) or 24MHz (our PLL setting)
enable_uarts:
	LDR R0, =GPIOC
 800022e:	4822      	ldr	r0, [pc, #136]	; (80002b8 <initialise_discovery_board+0x20>)
	LDR R1, =0x00055500	@ set the alternate function for the UART4 pins (PC10 and PC11) and uart5 pin PC12
 8000230:	4922      	ldr	r1, [pc, #136]	; (80002bc <initialise_discovery_board+0x24>)
	STR R1, [R0, AFRH]
 8000232:	6241      	str	r1, [r0, #36]	; 0x24

	LDR R1, =0x02A00000 @ Mask for pins PC10, PC11, PC12 to use the alternate function
 8000234:	f04f 7128 	mov.w	r1, #44040192	; 0x2a00000
	STR R1, [R0, GPIO_MODER]
 8000238:	6001      	str	r1, [r0, #0]

	LDR R1, =0x03F00000 @ Set the speed for PC10, PC11 and PC12 to use high speed
 800023a:	f04f 717c 	mov.w	r1, #66060288	; 0x3f00000
	STR R1, [R0, GPIO_OSPEEDR]
 800023e:	6081      	str	r1, [r0, #8]

	LDR R0, =GPIOD
 8000240:	481f      	ldr	r0, [pc, #124]	; (80002c0 <initialise_discovery_board+0x28>)
	LDR R1, =0x00000500
 8000242:	f44f 61a0 	mov.w	r1, #1280	; 0x500
	STR R1, [R0, AFRL]
 8000246:	6201      	str	r1, [r0, #32]

	LDR R1, =0x00000020
 8000248:	f04f 0120 	mov.w	r1, #32
	STR R1, [R0, GPIO_MODER]
 800024c:	6001      	str	r1, [r0, #0]

	LDR R1, =0x00000030 @ Set the speed for PC10, PC11 and PC12 to use high speed
 800024e:	f04f 0130 	mov.w	r1, #48	; 0x30
	STR R1, [R0, GPIO_OSPEEDR]
 8000252:	6081      	str	r1, [r0, #8]

	@ UART4EN is bit number 19, we need to turn the clock on for this
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000254:	4817      	ldr	r0, [pc, #92]	; (80002b4 <initialise_discovery_board+0x1c>)
	LDR R1, [R0, #APB1ENR] @ load the original value from the enable register
 8000256:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << UART4EN | 1 << UART5EN @ apply the bit mask to the previous values of the enable UART4
 8000258:	f441 11c0 	orr.w	r1, r1, #1572864	; 0x180000
	STR R1, [R0, #APB1ENR] @ store the modified enable register values back to RCC
 800025c:	61c1      	str	r1, [r0, #28]

	@ this is the baud rate
	MOV R1, #0x46 @ from our earlier calculations (for 8MHz), store this in register R1
 800025e:	f04f 0146 	mov.w	r1, #70	; 0x46
	LDR R0, =UART4 @ the base address for the register to turn clocks on/off
 8000262:	4818      	ldr	r0, [pc, #96]	; (80002c4 <initialise_discovery_board+0x2c>)
	STRH R1, [R0, #USART_BRR] @ store this value directly in the first half word (16 bits) of
 8000264:	8181      	strh	r1, [r0, #12]
							  	 @ the baud rate register
	MOV R1, #0x46
 8000266:	f04f 0146 	mov.w	r1, #70	; 0x46
	LDR R0, =UART5
 800026a:	4810      	ldr	r0, [pc, #64]	; (80002ac <initialise_discovery_board+0x14>)
	STRH R1, [R0, #USART_BRR]
 800026c:	8181      	strh	r1, [r0, #12]

	@ we want to set a few things here, lets define their bit positions to make it more readable
	LDR R0, =UART4 @ the base address for the register to set up UART4
 800026e:	4815      	ldr	r0, [pc, #84]	; (80002c4 <initialise_discovery_board+0x2c>)
	LDR R1, [R0, #USART_CR1] @ load the original value from the enable register
 8000270:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE @ make a bit mask with a '1' for the bits to enable,
 8000272:	f041 010d 	orr.w	r1, r1, #13
													   @ apply the bit mask to the previous values of the enable register
	STR R1, [R0, #USART_CR1] @ store the modified enable register values back to RCC
 8000276:	6001      	str	r1, [r0, #0]

	LDR R0, =UART5
 8000278:	480c      	ldr	r0, [pc, #48]	; (80002ac <initialise_discovery_board+0x14>)
	LDR R1, [R0, #USART_CR1]
 800027a:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE
 800027c:	f041 010d 	orr.w	r1, r1, #13

	STR R1, [R0, #USART_CR1]
 8000280:	6001      	str	r1, [r0, #0]

	BX LR @ return
 8000282:	4770      	bx	lr

08000284 <initialise_power>:
.equ PWREN, 28
.equ SYSCFGEN, 0
initialise_power:

	@ enable clock power
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000284:	480b      	ldr	r0, [pc, #44]	; (80002b4 <initialise_discovery_board+0x1c>)
	LDR R1, [R0, #APB1ENR] @ load the original value from the enable register
 8000286:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << PWREN @ apply the bit mask for power enable
 8000288:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
	STR R1, [R0, #APB1ENR] @ store the modified enable register values back to RCC
 800028c:	61c1      	str	r1, [r0, #28]

	@ enable clock config
	LDR R1, [R0, #APB2ENR] @ load the original value from the enable register
 800028e:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << SYSCFGEN @ apply the bit mask to allow clock configuration
 8000290:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, #APB2ENR] @ store the modified enable register values back to RCC
 8000294:	6181      	str	r1, [r0, #24]
	BX LR @ return
 8000296:	4770      	bx	lr

08000298 <initialise_discovery_board>:

initialise_discovery_board:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 8000298:	4805      	ldr	r0, [pc, #20]	; (80002b0 <initialise_discovery_board+0x18>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 800029a:	f245 5155 	movw	r1, #21845	; 0x5555
					 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
 800029e:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15
	BX LR @ return from function call
 80002a0:	4770      	bx	lr
 80002a2:	0000      	.short	0x0000
	LDR R6, =incoming_buffer
 80002a4:	20000000 	.word	0x20000000
	LDR R7, =incoming_counter
 80002a8:	2000003e 	.word	0x2000003e
	LDR R0, =UART5 @ the base address for the register to set up UART4
 80002ac:	40005000 	.word	0x40005000
	LDR R0, =GPIOE  					@ load the address of the GPIOE register into R0
 80002b0:	48001000 	.word	0x48001000
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 80002b4:	40021000 	.word	0x40021000
	LDR R0, =GPIOC
 80002b8:	48000800 	.word	0x48000800
	LDR R1, =0x00055500	@ set the alternate function for the UART4 pins (PC10 and PC11) and uart5 pin PC12
 80002bc:	00055500 	.word	0x00055500
	LDR R0, =GPIOD
 80002c0:	48000c00 	.word	0x48000c00
	LDR R0, =UART4 @ the base address for the register to turn clocks on/off
 80002c4:	40004c00 	.word	0x40004c00

080002c8 <main>:
#endif

extern void assembly_function();

int main(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	assembly_function();
 80002cc:	f7ff ff82 	bl	80001d4 <assembly_function>
    /* Loop forever */
	for(;;);
 80002d0:	e7fe      	b.n	80002d0 <main+0x8>
	...

080002d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d4:	480d      	ldr	r0, [pc, #52]	; (800030c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002dc:	480c      	ldr	r0, [pc, #48]	; (8000310 <LoopForever+0x6>)
  ldr r1, =_edata
 80002de:	490d      	ldr	r1, [pc, #52]	; (8000314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e0:	4a0d      	ldr	r2, [pc, #52]	; (8000318 <LoopForever+0xe>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e4:	e002      	b.n	80002ec <LoopCopyDataInit>

080002e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ea:	3304      	adds	r3, #4

080002ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f0:	d3f9      	bcc.n	80002e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f2:	4a0a      	ldr	r2, [pc, #40]	; (800031c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f4:	4c0a      	ldr	r4, [pc, #40]	; (8000320 <LoopForever+0x16>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f8:	e001      	b.n	80002fe <LoopFillZerobss>

080002fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002fc:	3204      	adds	r2, #4

080002fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000300:	d3fb      	bcc.n	80002fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000302:	f000 f811 	bl	8000328 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000306:	f7ff ffdf 	bl	80002c8 <main>

0800030a <LoopForever>:

LoopForever:
  b LoopForever
 800030a:	e7fe      	b.n	800030a <LoopForever>
  ldr   r0, =_estack
 800030c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000314:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8000318:	08000390 	.word	0x08000390
  ldr r2, =_sbss
 800031c:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000320:	2000005c 	.word	0x2000005c

08000324 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000324:	e7fe      	b.n	8000324 <ADC1_2_IRQHandler>
	...

08000328 <__libc_init_array>:
 8000328:	b570      	push	{r4, r5, r6, lr}
 800032a:	4d0d      	ldr	r5, [pc, #52]	; (8000360 <__libc_init_array+0x38>)
 800032c:	4c0d      	ldr	r4, [pc, #52]	; (8000364 <__libc_init_array+0x3c>)
 800032e:	1b64      	subs	r4, r4, r5
 8000330:	10a4      	asrs	r4, r4, #2
 8000332:	2600      	movs	r6, #0
 8000334:	42a6      	cmp	r6, r4
 8000336:	d109      	bne.n	800034c <__libc_init_array+0x24>
 8000338:	4d0b      	ldr	r5, [pc, #44]	; (8000368 <__libc_init_array+0x40>)
 800033a:	4c0c      	ldr	r4, [pc, #48]	; (800036c <__libc_init_array+0x44>)
 800033c:	f000 f818 	bl	8000370 <_init>
 8000340:	1b64      	subs	r4, r4, r5
 8000342:	10a4      	asrs	r4, r4, #2
 8000344:	2600      	movs	r6, #0
 8000346:	42a6      	cmp	r6, r4
 8000348:	d105      	bne.n	8000356 <__libc_init_array+0x2e>
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000350:	4798      	blx	r3
 8000352:	3601      	adds	r6, #1
 8000354:	e7ee      	b.n	8000334 <__libc_init_array+0xc>
 8000356:	f855 3b04 	ldr.w	r3, [r5], #4
 800035a:	4798      	blx	r3
 800035c:	3601      	adds	r6, #1
 800035e:	e7f2      	b.n	8000346 <__libc_init_array+0x1e>
 8000360:	08000388 	.word	0x08000388
 8000364:	08000388 	.word	0x08000388
 8000368:	08000388 	.word	0x08000388
 800036c:	0800038c 	.word	0x0800038c

08000370 <_init>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr

0800037c <_fini>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	bf00      	nop
 8000380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000382:	bc08      	pop	{r3}
 8000384:	469e      	mov	lr, r3
 8000386:	4770      	bx	lr
